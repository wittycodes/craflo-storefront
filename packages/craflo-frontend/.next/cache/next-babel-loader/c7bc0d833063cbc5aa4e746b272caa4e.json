{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useMemo, useCallback } from \"react\";\nimport { useQuery, useMutation, useApolloClient } from \"@apollo/client\";\nimport useStores from \"hooks/useStores\";\nimport useViewer from \"hooks/viewer/useViewer\";\nimport cartItemsConnectionToArray from \"lib/utils/cartItemsConnectionToArray\";\nimport { createCartMutation, addCartItemsMutation, removeCartItemsMutation, reconcileCartsMutation, setEmailOnAnonymousCartMutation, setFulfillmentOptionCartMutation, setShippingAddressCartMutation, updateCartItemsQuantityMutation, updateFulfillmentOptionsForGroup } from \"./mutations.gql\";\nimport { accountCartByAccountIdQuery, anonymousCartByCartIdQuery } from \"./queries.gql\";\n/**\n * Hook to get cart information\n *\n * @returns {Object} the user's current cart\n */\n\nexport default function useCart(shopId) {\n  // const cartWithShopHook = () => {\n  const {\n    cartStore\n  } = useStores();\n  const [viewer, isLoadingViewer] = useViewer();\n  const apolloClient = useApolloClient();\n  const accountId = viewer && viewer._id;\n  console.log(viewer, accountId, \"LALLL\");\n  const shouldSkipAccountCartByAccountIdQuery = Boolean(!accountId || cartStore.hasAnonymousCartCredentials(shopId) || isLoadingViewer || !shopId);\n  const shouldSkipAnonymousCartByCartIdQuery = Boolean(accountId || isLoadingViewer || !cartStore.hasAnonymousCartCredentials(shopId));\n  const {\n    loading: isLoading,\n    data: cartData,\n    fetchMore,\n    refetch: refetchCart\n  } = useQuery(accountCartByAccountIdQuery, {\n    skip: shouldSkipAccountCartByAccountIdQuery,\n    variables: {\n      accountId,\n      shopId: shopId\n    },\n    pollInterval: shouldSkipAccountCartByAccountIdQuery ? 0 : 2000\n  });\n  const {\n    data: cartDataAnonymous,\n    refetch: refetchCartAnonymous\n  } = useQuery(anonymousCartByCartIdQuery, {\n    skip: shouldSkipAnonymousCartByCartIdQuery,\n    variables: {\n      cartId: cartStore.anonymousCartId[shopId],\n      cartToken: cartStore.anonymousCartToken[shopId]\n    },\n    pollInterval: shouldSkipAnonymousCartByCartIdQuery ? 0 : 2000\n  });\n  useEffect(() => {\n    if (!shouldSkipAccountCartByAccountIdQuery) {\n      refetchCart();\n    }\n\n    if (!shouldSkipAnonymousCartByCartIdQuery) {\n      refetchCartAnonymous();\n    }\n  }, [viewer, refetchCart]);\n  const cart = useMemo(() => {\n    if (!shouldSkipAccountCartByAccountIdQuery && cartData) {\n      return cartData.cart;\n    }\n\n    if (!shouldSkipAnonymousCartByCartIdQuery && cartDataAnonymous) {\n      return cartDataAnonymous.cart;\n    }\n\n    return {};\n  }, [cartData, cartDataAnonymous, shouldSkipAccountCartByAccountIdQuery, shouldSkipAnonymousCartByCartIdQuery]);\n  const pageInfo = useMemo(() => {\n    if (cart && cart.items) return cart.items.pageInfo;\n    return {};\n  }, [cart]); // With an authenticated cart, set the accountCartId for later use\n\n  useEffect(() => {\n    if (cart && cart.account && cart.account._id === (viewer && viewer._id)) {\n      cartStore.setAccountCartId({\n        [shopId]: cart._id\n      });\n    } else {\n      cartStore.setAccountCartId({\n        [shopId]: null\n      });\n    }\n  }, [cart, cartStore.setAccountCartId, viewer]);\n\n  const cartIdAndCartToken = () => {\n    const {\n      accountCartId,\n      anonymousCartId,\n      anonymousCartToken\n    } = cartStore;\n    let cartToken = {};\n\n    if (!accountCartId[shopId]) {\n      cartToken = {\n        cartToken: anonymousCartToken[shopId]\n      };\n    }\n\n    return _objectSpread({\n      cartId: accountCartId[shopId] || anonymousCartId[shopId]\n    }, cartToken);\n  };\n\n  const [addOrCreateCartMutation, {\n    loading: addOrCreateCartLoading\n  }] = useMutation(cart && cart._id ? addCartItemsMutation : createCartMutation, {\n    onCompleted(addOrCreateCartMutationData) {\n      if (addOrCreateCartMutationData && addOrCreateCartMutationData.createCart && (!viewer || !viewer._id)) {\n        const {\n          cart: cartPayload,\n          token\n        } = addOrCreateCartMutationData.createCart; //--console.log(addOrCreateCartMutationData)\n\n        cartStore.setAnonymousCartCredentials(cartPayload._id, token, shopId);\n      }\n\n      refetchCart();\n    }\n\n  });\n  const [removeCartItemsMutationFun, {\n    loading: removeCartItemsLoading\n  }] = useMutation(removeCartItemsMutation, {\n    update(cache, {\n      data: mutationData\n    }) {\n      if (mutationData && mutationData.removeCartItems) {\n        const {\n          cart: cartPayload\n        } = mutationData.removeCartItems;\n\n        if (cartPayload) {\n          // Update Apollo cache\n          cache.writeQuery({\n            query: cartPayload.account ? accountCartByAccountIdQuery : anonymousCartByCartIdQuery,\n            data: {\n              cart: cartPayload\n            }\n          });\n        }\n      }\n    }\n\n  });\n  const handleRemoveCartItems = useCallback(async itemIds => removeCartItemsMutationFun({\n    variables: {\n      input: {\n        cartId: cartStore.anonymousCartId[shopId] || cartStore.accountCartId[shopId],\n        cartItemIds: Array.isArray(itemIds) && itemIds || [itemIds],\n        cartToken: cartStore.anonymousCartToken[shopId] || null\n      }\n    }\n  }), [cartStore.anonymousCartId[shopId], cartStore.accountCartId[shopId], cartStore.anonymousCartToken[shopId]]);\n\n  const handleAddItemsToCart = async (data, isCreating) => {\n    const input = {\n      items: data.items\n    };\n\n    if (!isCreating && (!viewer || !viewer._id) && cartStore.hasAnonymousCartCredentials(shopId)) {\n      // Given an anonymous user, with a cart, add token and cartId to input\n      const {\n        anonymousCartId,\n        anonymousCartToken\n      } = cartStore; // Add items to an existing anonymous cart\n\n      input.cartToken = anonymousCartToken[shopId];\n      input.cartId = anonymousCartId[shopId];\n    } else if (!isCreating && viewer && viewer._id && cartStore.hasAccountCart(shopId)) {\n      // With an account and an account cart, set the accountCartId on the input object\n      input.cartId = cartStore.accountCartId[shopId];\n    } else if (isCreating) {\n      // With no anonymous or account cart, add shop Id to input as it will be needed for the create cart mutation\n      input.shopId = shopId;\n    } // Run the mutation function provided as a param.\n    // It may take the form of `createCart` or `addCartItems` depending on the\n    // availability of a cart for either an anonymous or logged-in account.\n\n\n    return addOrCreateCartMutation({\n      variables: {\n        input\n      }\n    });\n  };\n\n  const handleUpdateFulfillmentOptionsForGroup = async fulfillmentGroupId => {\n    await apolloClient.mutate({\n      mutation: updateFulfillmentOptionsForGroup,\n      variables: {\n        input: _objectSpread(_objectSpread({}, cartIdAndCartToken()), {}, {\n          fulfillmentGroupId\n        })\n      }\n    });\n  }; // If we are authenticated, reconcile carts\n\n\n  useEffect(() => {\n    if (cartStore.hasAnonymousCartCredentials(shopId) && viewer && viewer._id && cartStore.isReconcilingCarts === false) {\n      // Prevent multiple calls to reconcile cart mutations when one is currently in progress\n      cartStore.setIsReconcilingCarts(true);\n      apolloClient.mutate({\n        mutation: reconcileCartsMutation,\n        update: (cache, {\n          data: mutationData\n        }) => {\n          // If the mutation data contains a createCart object and we are an anonymous user,\n          // then set the anonymous cart details\n          if (mutationData && mutationData.reconcileCarts) {\n            const {\n              cart: cartPayload\n            } = mutationData.reconcileCarts;\n\n            if (cartPayload) {\n              // Clear anonymous account credentials\n              cartStore.clearAnonymousCartCredentials(shopId); // Update cache for account cart query\n\n              cache.writeQuery({\n                query: accountCartByAccountIdQuery,\n                data: {\n                  cart: cartPayload\n                }\n              }); // Refetch cart\n\n              refetchCart && refetchCart();\n            }\n          }\n\n          cartStore.setIsReconcilingCarts(false);\n        },\n        variables: {\n          input: {\n            anonymousCartId: cartStore.anonymousCartId[shopId],\n            cartToken: cartStore.anonymousCartToken[shopId],\n            shopId: shopId\n          }\n        }\n      });\n    }\n  }, [viewer, () => cartStore.hasAnonymousCartCredentials(shopId), cartStore.isReconcilingCarts, apolloClient]);\n  let processedCartData = null;\n\n  if (cart) {\n    processedCartData = _objectSpread(_objectSpread({}, cart), {}, {\n      items: cartItemsConnectionToArray(cart.items)\n    });\n  }\n\n  return {\n    addItemsToCart: items => handleAddItemsToCart({\n      items\n    }, !cart || !cart._id),\n    addOrCreateCartLoading,\n    cart: processedCartData,\n    checkoutMutations: {\n      onSetFulfillmentOption: async ({\n        fulfillmentGroupId,\n        fulfillmentMethodId\n      }) => {\n        const cartIdData = cartIdAndCartToken();\n        if (!cartIdData.cartId) return null;\n        const response = await apolloClient.mutate({\n          mutation: setFulfillmentOptionCartMutation,\n          variables: {\n            input: _objectSpread(_objectSpread({}, cartIdData), {}, {\n              fulfillmentGroupId,\n              fulfillmentMethodId\n            })\n          }\n        });\n        return response;\n      },\n      onSetShippingAddress: async address => {\n        const response = await apolloClient.mutate({\n          mutation: setShippingAddressCartMutation,\n          variables: {\n            input: _objectSpread(_objectSpread({}, cartIdAndCartToken()), {}, {\n              address\n            })\n          }\n        }); // Update fulfillment options for current cart\n\n        const {\n          data: {\n            setShippingAddressOnCart\n          }\n        } = response;\n        handleUpdateFulfillmentOptionsForGroup(setShippingAddressOnCart.cart.checkout.fulfillmentGroups[0]._id);\n        return response;\n      }\n    },\n    hasMoreCartItems: pageInfo && pageInfo.hasNextPage || false,\n    isLoadingCart: isLoadingViewer || isLoading,\n    loadMoreCartItems: () => {\n      fetchMore({\n        variables: {\n          itemsAfterCursor: pageInfo && pageInfo.endCursor || null\n        },\n        updateQuery: (previousResult, {\n          fetchMoreResult\n        }) => {\n          const {\n            cart: fetchMoreCart\n          } = fetchMoreResult; // Check for additional items from result\n\n          if (fetchMoreCart && fetchMoreCart.items && Array.isArray(fetchMoreCart.items.edges) && fetchMoreCart.items.edges.length) {\n            // Merge previous cart items with next cart items\n            return _objectSpread(_objectSpread({}, fetchMoreResult), {}, {\n              cart: _objectSpread(_objectSpread({}, fetchMoreCart), {}, {\n                items: {\n                  __typename: previousResult.cart.items.__typename,\n                  pageInfo: fetchMoreCart.items.pageInfo,\n                  edges: [...previousResult.cart.items.edges, ...fetchMoreCart.items.edges]\n                }\n              })\n            });\n          } // Send the previous result if the new result contains no additional data\n\n\n          return previousResult;\n        }\n      });\n    },\n    onChangeCartItemsQuantity: async cartItems => {\n      await apolloClient.mutate({\n        mutation: updateCartItemsQuantityMutation,\n        variables: {\n          input: {\n            cartId: cartStore.anonymousCartId[shopId] || cartStore.accountCartId[shopId],\n            items: Array.isArray(cartItems) && cartItems || [cartItems],\n            cartToken: cartStore.anonymousCartToken[shopId] || null\n          }\n        },\n        update: (cache, {\n          data: mutationData\n        }) => {\n          if (mutationData && mutationData.updateCartItemsQuantity) {\n            const {\n              cart: cartPayload\n            } = mutationData.updateCartItemsQuantity;\n\n            if (cartPayload) {\n              // Update Apollo cache\n              cache.writeQuery({\n                query: cartPayload.account ? accountCartByAccountIdQuery : anonymousCartByCartIdQuery,\n                data: {\n                  cart: cartPayload\n                }\n              });\n            }\n          }\n        }\n      });\n    },\n    onRemoveCartItems: handleRemoveCartItems,\n    removeCartItemsLoading,\n    clearAuthenticatedUsersCart: () => {\n      if (viewer && viewer._id) {\n        apolloClient.cache.writeQuery({\n          query: accountCartByAccountIdQuery,\n          data: {\n            cart: null\n          },\n          variables: {\n            accountId: viewer && viewer._id,\n            shopId: shopId\n          }\n        });\n      }\n    },\n    refetchCart,\n    setEmailOnAnonymousCart: async ({\n      email\n    }) => {\n      await apolloClient.mutate({\n        mutation: setEmailOnAnonymousCartMutation,\n        variables: {\n          input: _objectSpread(_objectSpread({}, cartIdAndCartToken()), {}, {\n            email\n          })\n        }\n      });\n    }\n  }; // }\n  // return cartWithShopHook\n}","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/src/reaction/hooks/cart/useCart.tsx"],"names":["useEffect","useMemo","useCallback","useQuery","useMutation","useApolloClient","useStores","useViewer","cartItemsConnectionToArray","createCartMutation","addCartItemsMutation","removeCartItemsMutation","reconcileCartsMutation","setEmailOnAnonymousCartMutation","setFulfillmentOptionCartMutation","setShippingAddressCartMutation","updateCartItemsQuantityMutation","updateFulfillmentOptionsForGroup","accountCartByAccountIdQuery","anonymousCartByCartIdQuery","useCart","shopId","cartStore","viewer","isLoadingViewer","apolloClient","accountId","_id","console","log","shouldSkipAccountCartByAccountIdQuery","Boolean","hasAnonymousCartCredentials","shouldSkipAnonymousCartByCartIdQuery","loading","isLoading","data","cartData","fetchMore","refetch","refetchCart","skip","variables","pollInterval","cartDataAnonymous","refetchCartAnonymous","cartId","anonymousCartId","cartToken","anonymousCartToken","cart","pageInfo","items","account","setAccountCartId","cartIdAndCartToken","accountCartId","addOrCreateCartMutation","addOrCreateCartLoading","onCompleted","addOrCreateCartMutationData","createCart","cartPayload","token","setAnonymousCartCredentials","removeCartItemsMutationFun","removeCartItemsLoading","update","cache","mutationData","removeCartItems","writeQuery","query","handleRemoveCartItems","itemIds","input","cartItemIds","Array","isArray","handleAddItemsToCart","isCreating","hasAccountCart","handleUpdateFulfillmentOptionsForGroup","fulfillmentGroupId","mutate","mutation","isReconcilingCarts","setIsReconcilingCarts","reconcileCarts","clearAnonymousCartCredentials","processedCartData","addItemsToCart","checkoutMutations","onSetFulfillmentOption","fulfillmentMethodId","cartIdData","response","onSetShippingAddress","address","setShippingAddressOnCart","checkout","fulfillmentGroups","hasMoreCartItems","hasNextPage","isLoadingCart","loadMoreCartItems","itemsAfterCursor","endCursor","updateQuery","previousResult","fetchMoreResult","fetchMoreCart","edges","length","__typename","onChangeCartItemsQuantity","cartItems","updateCartItemsQuantity","onRemoveCartItems","clearAuthenticatedUsersCart","setEmailOnAnonymousCart","email"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useCallback } from \"react\";\nimport { useQuery, useMutation, useApolloClient } from \"@apollo/client\";\nimport useStores from \"hooks/useStores\";\nimport useShop from \"hooks/shop/useShop\";\nimport useMerchantShop from \"hooks/shop/useMerchantShop\";\nimport useViewer from \"hooks/viewer/useViewer\";\nimport cartItemsConnectionToArray from \"lib/utils/cartItemsConnectionToArray\";\nimport {\n  createCartMutation,\n  addCartItemsMutation,\n  removeCartItemsMutation,\n  reconcileCartsMutation,\n  setEmailOnAnonymousCartMutation,\n  setFulfillmentOptionCartMutation,\n  setShippingAddressCartMutation,\n  updateCartItemsQuantityMutation,\n  updateFulfillmentOptionsForGroup\n} from \"./mutations.gql\";\nimport {\n  accountCartByAccountIdQuery,\n  anonymousCartByCartIdQuery\n} from \"./queries.gql\";\n\n\n/**\n * Hook to get cart information\n *\n * @returns {Object} the user's current cart\n */\nexport default function useCart(shopId) {\n  // const cartWithShopHook = () => {\n    const {cartStore} = useStores();\n    const [viewer, isLoadingViewer] = useViewer();\n\n    const apolloClient = useApolloClient();\n    const accountId = viewer && viewer._id;\n\n    console.log(viewer, accountId, \"LALLL\")\n    const shouldSkipAccountCartByAccountIdQuery = Boolean(!accountId || cartStore.hasAnonymousCartCredentials(shopId) || isLoadingViewer || !shopId);\n    const shouldSkipAnonymousCartByCartIdQuery = Boolean(accountId || isLoadingViewer || !cartStore.hasAnonymousCartCredentials(shopId));\n\n\n    const {loading: isLoading, data: cartData, fetchMore, refetch: refetchCart} = useQuery(accountCartByAccountIdQuery, {\n      skip: shouldSkipAccountCartByAccountIdQuery,\n      variables: {\n        accountId,\n        shopId: shopId\n      },\n      pollInterval: shouldSkipAccountCartByAccountIdQuery ? 0 : 2000\n    });\n\n    const {data: cartDataAnonymous, refetch: refetchCartAnonymous} = useQuery(anonymousCartByCartIdQuery, {\n      skip: shouldSkipAnonymousCartByCartIdQuery,\n      variables: {\n        cartId: cartStore.anonymousCartId[shopId],\n        cartToken: cartStore.anonymousCartToken[shopId]\n      },\n      pollInterval: shouldSkipAnonymousCartByCartIdQuery ? 0 : 2000\n    });\n\n\n    useEffect(() => {\n      if (!shouldSkipAccountCartByAccountIdQuery) {\n        refetchCart();\n      }\n      if (!shouldSkipAnonymousCartByCartIdQuery) {\n        refetchCartAnonymous();\n      }\n    }, [viewer, refetchCart]);\n\n\n    const cart = useMemo(() => {\n      if (!shouldSkipAccountCartByAccountIdQuery && cartData) {\n        return cartData.cart;\n      }\n      if (!shouldSkipAnonymousCartByCartIdQuery && cartDataAnonymous) {\n        return cartDataAnonymous.cart;\n      }\n\n      return {};\n    }, [cartData, cartDataAnonymous, shouldSkipAccountCartByAccountIdQuery, shouldSkipAnonymousCartByCartIdQuery]);\n\n\n    const pageInfo = useMemo(() => {\n      if (cart && cart.items) return cart.items.pageInfo;\n      return {};\n    }, [cart]);\n\n\n    // With an authenticated cart, set the accountCartId for later use\n    useEffect(() => {\n      if (cart && cart.account && cart.account._id === (viewer && viewer._id)) {\n        cartStore.setAccountCartId({\n          [shopId]: cart._id\n        });\n      } else {\n        cartStore.setAccountCartId({\n          [shopId]: null\n        });\n      }\n    }, [cart, cartStore.setAccountCartId, viewer]);\n\n\n    const cartIdAndCartToken = () => {\n      const {accountCartId, anonymousCartId, anonymousCartToken} = cartStore;\n      let cartToken = {};\n      if (!accountCartId[shopId]) {\n        cartToken = {cartToken: anonymousCartToken[shopId]};\n      }\n\n      return {\n        cartId: accountCartId[shopId] || anonymousCartId[shopId],\n        ...cartToken\n      };\n    };\n\n\n    const [addOrCreateCartMutation, {\n      loading: addOrCreateCartLoading\n    }] = useMutation(cart && cart._id ? addCartItemsMutation : createCartMutation, {\n      onCompleted(addOrCreateCartMutationData) {\n        if (addOrCreateCartMutationData && addOrCreateCartMutationData.createCart && (!viewer || !viewer._id)) {\n          const {cart: cartPayload, token} = addOrCreateCartMutationData.createCart;\n          //--console.log(addOrCreateCartMutationData)\n          cartStore.setAnonymousCartCredentials(cartPayload._id, token, shopId);\n        }\n        refetchCart();\n      }\n    });\n\n    const [removeCartItemsMutationFun, {\n      loading: removeCartItemsLoading\n    }] = useMutation(removeCartItemsMutation, {\n      update(cache, {data: mutationData}) {\n        if (mutationData && mutationData.removeCartItems) {\n          const {cart: cartPayload} = mutationData.removeCartItems;\n\n          if (cartPayload) {\n            // Update Apollo cache\n            cache.writeQuery({\n              query: cartPayload.account ? accountCartByAccountIdQuery : anonymousCartByCartIdQuery,\n              data: {cart: cartPayload}\n            });\n          }\n        }\n      }\n    });\n\n    const handleRemoveCartItems = useCallback(async (itemIds) => removeCartItemsMutationFun({\n      variables: {\n        input: {\n          cartId: cartStore.anonymousCartId[shopId] || cartStore.accountCartId[shopId],\n          cartItemIds: (Array.isArray(itemIds) && itemIds) || [itemIds],\n          cartToken: cartStore.anonymousCartToken[shopId] || null\n        }\n      }\n    }), [cartStore.anonymousCartId[shopId], cartStore.accountCartId[shopId], cartStore.anonymousCartToken[shopId]]);\n\n\n    const handleAddItemsToCart = async (data, isCreating) => {\n      const input = {\n        items: data.items\n      };\n\n      if (!isCreating && (!viewer || !viewer._id) && cartStore.hasAnonymousCartCredentials(shopId)) {\n        // Given an anonymous user, with a cart, add token and cartId to input\n        const {anonymousCartId, anonymousCartToken} = cartStore;\n\n        // Add items to an existing anonymous cart\n        input.cartToken = anonymousCartToken[shopId];\n        input.cartId = anonymousCartId[shopId];\n\n      } else if (!isCreating && viewer && viewer._id && cartStore.hasAccountCart(shopId)) {\n        // With an account and an account cart, set the accountCartId on the input object\n        input.cartId = cartStore.accountCartId[shopId];\n      } else if (isCreating) {\n        // With no anonymous or account cart, add shop Id to input as it will be needed for the create cart mutation\n        input.shopId = shopId;\n      }\n\n      // Run the mutation function provided as a param.\n      // It may take the form of `createCart` or `addCartItems` depending on the\n      // availability of a cart for either an anonymous or logged-in account.\n      return addOrCreateCartMutation({\n        variables: {\n          input\n        }\n      });\n    };\n\n    const handleUpdateFulfillmentOptionsForGroup = async (fulfillmentGroupId) => {\n      await apolloClient.mutate({\n        mutation: updateFulfillmentOptionsForGroup,\n        variables: {\n          input: {\n            ...cartIdAndCartToken(),\n            fulfillmentGroupId\n          }\n        }\n      });\n    };\n\n\n    // If we are authenticated, reconcile carts\n    useEffect(() => {\n      if (cartStore.hasAnonymousCartCredentials(shopId) && viewer && viewer._id && cartStore.isReconcilingCarts === false) {\n        // Prevent multiple calls to reconcile cart mutations when one is currently in progress\n        cartStore.setIsReconcilingCarts(true);\n\n        apolloClient.mutate({\n          mutation: reconcileCartsMutation,\n          update: (cache, {data: mutationData}) => {\n            // If the mutation data contains a createCart object and we are an anonymous user,\n            // then set the anonymous cart details\n            if (mutationData && mutationData.reconcileCarts) {\n              const {cart: cartPayload} = mutationData.reconcileCarts;\n\n              if (cartPayload) {\n                // Clear anonymous account credentials\n                cartStore.clearAnonymousCartCredentials(shopId);\n\n                // Update cache for account cart query\n                cache.writeQuery({\n                  query: accountCartByAccountIdQuery,\n                  data: {cart: cartPayload}\n                });\n\n                // Refetch cart\n                refetchCart && refetchCart();\n              }\n            }\n            cartStore.setIsReconcilingCarts(false);\n          },\n          variables: {\n            input: {\n              anonymousCartId: cartStore.anonymousCartId[shopId],\n              cartToken: cartStore.anonymousCartToken[shopId],\n              shopId: shopId\n            }\n          }\n        });\n      }\n    }, [viewer, () => cartStore.hasAnonymousCartCredentials(shopId), cartStore.isReconcilingCarts, apolloClient]);\n\n    let processedCartData = null;\n    if (cart) {\n      processedCartData = {\n        ...cart,\n        items: cartItemsConnectionToArray(cart.items)\n      };\n    }\n\n    return {\n      addItemsToCart: (items) => handleAddItemsToCart({items}, !cart || !cart._id),\n      addOrCreateCartLoading,\n      cart: processedCartData,\n      checkoutMutations: {\n        onSetFulfillmentOption: async ({fulfillmentGroupId, fulfillmentMethodId}) => {\n          const cartIdData = cartIdAndCartToken();\n\n          if (!cartIdData.cartId) return null;\n\n          const response = await apolloClient.mutate({\n            mutation: setFulfillmentOptionCartMutation,\n            variables: {\n              input: {\n                ...cartIdData,\n                fulfillmentGroupId,\n                fulfillmentMethodId\n              }\n            }\n          });\n\n          return response;\n        },\n        onSetShippingAddress: async (address) => {\n          const response = await apolloClient.mutate({\n            mutation: setShippingAddressCartMutation,\n            variables: {\n              input: {\n                ...cartIdAndCartToken(),\n                address\n              }\n            }\n          });\n\n          // Update fulfillment options for current cart\n          const {data: {setShippingAddressOnCart}} = response;\n          handleUpdateFulfillmentOptionsForGroup(setShippingAddressOnCart.cart.checkout.fulfillmentGroups[0]._id);\n\n          return response;\n        }\n      },\n      hasMoreCartItems: (pageInfo && pageInfo.hasNextPage) || false,\n      isLoadingCart: isLoadingViewer || isLoading,\n      loadMoreCartItems: () => {\n        fetchMore({\n          variables: {\n            itemsAfterCursor: (pageInfo && pageInfo.endCursor) || null\n          },\n          updateQuery: (previousResult, {fetchMoreResult}) => {\n            const {cart: fetchMoreCart} = fetchMoreResult;\n\n            // Check for additional items from result\n            if (fetchMoreCart && fetchMoreCart.items && Array.isArray(fetchMoreCart.items.edges) && fetchMoreCart.items.edges.length) {\n              // Merge previous cart items with next cart items\n              return {\n                ...fetchMoreResult,\n                cart: {\n                  ...fetchMoreCart,\n                  items: {\n                    __typename: previousResult.cart.items.__typename,\n                    pageInfo: fetchMoreCart.items.pageInfo,\n                    edges: [\n                      ...previousResult.cart.items.edges,\n                      ...fetchMoreCart.items.edges\n                    ]\n                  }\n                }\n              };\n            }\n\n            // Send the previous result if the new result contains no additional data\n            return previousResult;\n          }\n        });\n      },\n      onChangeCartItemsQuantity: async (cartItems) => {\n        await apolloClient.mutate({\n          mutation: updateCartItemsQuantityMutation,\n          variables: {\n            input: {\n              cartId: cartStore.anonymousCartId[shopId] || cartStore.accountCartId[shopId],\n              items: (Array.isArray(cartItems) && cartItems) || [cartItems],\n              cartToken: cartStore.anonymousCartToken[shopId] || null\n            }\n          },\n          update: (cache, {data: mutationData}) => {\n            if (mutationData && mutationData.updateCartItemsQuantity) {\n              const {cart: cartPayload} = mutationData.updateCartItemsQuantity;\n\n              if (cartPayload) {\n                // Update Apollo cache\n                cache.writeQuery({\n                  query: cartPayload.account ? accountCartByAccountIdQuery : anonymousCartByCartIdQuery,\n                  data: {cart: cartPayload}\n                });\n              }\n            }\n          }\n        });\n      },\n      onRemoveCartItems: handleRemoveCartItems,\n      removeCartItemsLoading,\n      clearAuthenticatedUsersCart: () => {\n        if (viewer && viewer._id) {\n          apolloClient.cache.writeQuery({\n            query: accountCartByAccountIdQuery,\n            data: {cart: null},\n            variables: {\n              accountId: viewer && viewer._id,\n              shopId: shopId\n            }\n          });\n        }\n      },\n      refetchCart,\n      setEmailOnAnonymousCart: async ({email}) => {\n        await apolloClient.mutate({\n          mutation: setEmailOnAnonymousCartMutation,\n          variables: {\n            input: {\n              ...cartIdAndCartToken(),\n              email\n            }\n          }\n        });\n      }\n    }\n  // }\n  // return cartWithShopHook\n}\n"]},"metadata":{},"sourceType":"module"}