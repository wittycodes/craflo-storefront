{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { ClickCounterViewModel } from \"./clickCounterViewModel\";\nimport { ClickCounterModel } from \"../clickCounterModel\";\nexport let ClickCounterViewModelBinder = /*#__PURE__*/function () {\n  function ClickCounterViewModelBinder(eventManager) {\n    _classCallCheck(this, ClickCounterViewModelBinder);\n  }\n\n  _createClass(ClickCounterViewModelBinder, [{\n    key: \"modelToViewModel\",\n    value: async function modelToViewModel(model, viewModel, bindingContext) {\n      if (!viewModel) {\n        viewModel = new ClickCounterViewModel();\n      }\n\n      const binding = {\n        name: \"click-counter\",\n        displayName: \"Click counter\",\n        readonly: bindingContext ? bindingContext.readonly : false,\n        model: model,\n        draggable: true,\n        editor: \"click-counter-editor\",\n        applyChanges: async () => {\n          await this.modelToViewModel(model, viewModel, bindingContext);\n          this.eventManager.dispatchEvent(\"onContentUpdate\");\n        }\n      };\n      viewModel[\"widgetBinding\"] = binding;\n      return viewModel;\n    }\n  }, {\n    key: \"canHandleModel\",\n    value: function canHandleModel(model) {\n      return model instanceof ClickCounterModel;\n    }\n  }]);\n\n  return ClickCounterViewModelBinder;\n}();","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/paperbits/src/components/click-counter/design/clickCounterViewModelBinder.ts"],"names":["ClickCounterViewModel","ClickCounterModel","ClickCounterViewModelBinder","eventManager","model","viewModel","bindingContext","binding","name","displayName","readonly","draggable","editor","applyChanges","modelToViewModel","dispatchEvent"],"mappings":";;;;;;AAAA,SAASA,qBAAT,QAAsC,yBAAtC;AAEA,SAASC,iBAAT,QAAkC,sBAAlC;AAKA,WAAaC,2BAAb;AACI,uCAA6BC,YAA7B,EAAyD;AAAA;AAAG;;AADhE;AAAA;AAAA,2CAGkCC,KAHlC,EAG4DC,SAH5D,EAG+FC,cAH/F,EAG0J;AAClJ,UAAI,CAACD,SAAL,EAAgB;AACZA,QAAAA,SAAS,GAAG,IAAIL,qBAAJ,EAAZ;AACH;;AAED,YAAMO,OAA0C,GAAG;AAC/CC,QAAAA,IAAI,EAAE,eADyC;AAE/CC,QAAAA,WAAW,EAAE,eAFkC;AAG/CC,QAAAA,QAAQ,EAAEJ,cAAc,GAAGA,cAAc,CAACI,QAAlB,GAA6B,KAHN;AAI/CN,QAAAA,KAAK,EAAEA,KAJwC;AAK/CO,QAAAA,SAAS,EAAE,IALoC;AAM/CC,QAAAA,MAAM,EAAE,sBANuC;AAO/CC,QAAAA,YAAY,EAAE,YAAY;AACtB,gBAAM,KAAKC,gBAAL,CAAsBV,KAAtB,EAA6BC,SAA7B,EAAwCC,cAAxC,CAAN;AACA,eAAKH,YAAL,CAAkBY,aAAlB,CAAgC,iBAAhC;AACH;AAV8C,OAAnD;AAaAV,MAAAA,SAAS,CAAC,eAAD,CAAT,GAA6BE,OAA7B;AAEA,aAAOF,SAAP;AACH;AAxBL;AAAA;AAAA,mCA0B0BD,KA1B1B,EA0B6D;AACrD,aAAOA,KAAK,YAAYH,iBAAxB;AACH;AA5BL;;AAAA;AAAA","sourcesContent":["import { ClickCounterViewModel } from \"./clickCounterViewModel\";\nimport { ViewModelBinder } from \"@paperbits/common/widgets\";\nimport { ClickCounterModel } from \"../clickCounterModel\";\nimport { EventManager } from \"@paperbits/common/events\";\nimport { IWidgetBinding } from \"@paperbits/common/editing\";\nimport { Bag } from \"@paperbits/common\";\n\nexport class ClickCounterViewModelBinder implements ViewModelBinder<ClickCounterModel, ClickCounterViewModel>  {\n    constructor(private readonly eventManager: EventManager) { }\n\n    public async modelToViewModel(model: ClickCounterModel, viewModel?: ClickCounterViewModel, bindingContext?: Bag<any>): Promise<ClickCounterViewModel> {\n        if (!viewModel) {\n            viewModel = new ClickCounterViewModel();\n        }\n\n        const binding: IWidgetBinding<ClickCounterModel> = {\n            name: \"click-counter\",\n            displayName: \"Click counter\",\n            readonly: bindingContext ? bindingContext.readonly : false,\n            model: model,\n            draggable: true,\n            editor: \"click-counter-editor\",\n            applyChanges: async () => {\n                await this.modelToViewModel(model, viewModel, bindingContext);\n                this.eventManager.dispatchEvent(\"onContentUpdate\");\n            }\n        };\n\n        viewModel[\"widgetBinding\"] = binding;\n\n        return viewModel;\n    }\n\n    public canHandleModel(model: ClickCounterModel): boolean {\n        return model instanceof ClickCounterModel;\n    }\n}"]},"metadata":{},"sourceType":"module"}