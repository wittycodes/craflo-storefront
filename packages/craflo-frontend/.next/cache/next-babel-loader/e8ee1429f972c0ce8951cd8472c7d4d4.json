{"ast":null,"code":"var _jsxFileName = \"/usr/local/src/app/packages/craflo-frontend/src/reaction/hooks/useTranslation.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useContext, useCallback, useMemo } from \"react\";\nimport { useRouter } from \"next/router\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport { LocaleContext } from \"context/LocaleContext\";\n/**\n * Gets translations for a given namespace\n *\n * @param {String} namespace - the translation namespace\n * @returns {Object} Translations\n */\n\nexport default function useTranslation(namespace) {\n  _s();\n\n  var _this = this;\n\n  var _ref = useContext(LocaleContext) || {},\n      localeData = _ref.localeData;\n\n  var translations = localeData.translations,\n      lang = localeData.lang;\n\n  var _useRouter = useRouter(),\n      isFallback = _useRouter.isFallback;\n\n  var stringsForNamespace = useMemo(function () {\n    return translations && Array.isArray(translations) && translations.find(function (translation) {\n      return translation.namespace === namespace;\n    });\n  }, [translations, namespace]);\n  var t = useCallback(function (key) {\n    // eslint-disable-line id-length\n    if (isFallback) {\n      return /*#__PURE__*/React.createElement(Skeleton, {\n        variant: \"text\",\n        width: key ? key.length * 10 : 30,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 14\n        }\n      });\n    }\n\n    if (!stringsForNamespace) {\n      // eslint-disable-next-line no-console\n      console.warn(\"Namespace '\".concat(namespace, \"' for locale '\").concat(lang, \"' not found.\"));\n      return key;\n    }\n\n    if (!stringsForNamespace.translatedStrings || !stringsForNamespace.translatedStrings[key]) {\n      // eslint-disable-next-line no-console\n      console.warn(\"Translation '\".concat(key, \"' for locale '\").concat(lang, \"' not found.\"));\n      return key;\n    }\n\n    return stringsForNamespace.translatedStrings[key];\n  }, [stringsForNamespace]);\n  return {\n    t: t,\n    // eslint-disable-line id-length\n    locale: lang || \"in\"\n  };\n}\n\n_s(useTranslation, \"Njh1f3oBbGU+JdiMGEglarKdpjs=\", false, function () {\n  return [useRouter];\n});","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/src/reaction/hooks/useTranslation.tsx"],"names":["useContext","useCallback","useMemo","useRouter","Skeleton","LocaleContext","useTranslation","namespace","localeData","translations","lang","isFallback","stringsForNamespace","Array","isArray","find","translation","t","key","length","console","warn","translatedStrings","locale"],"mappings":";;;;;AAAA,SAASA,UAAT,EAAqBC,WAArB,EAAkCC,OAAlC,QAAiD,OAAjD;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,cAAT,CAAwBC,SAAxB,EAAmC;AAAA;;AAAA;;AAAA,aACzBP,UAAU,CAACK,aAAD,CAAV,IAA6B,EADJ;AAAA,MACxCG,UADwC,QACxCA,UADwC;;AAAA,MAExCC,YAFwC,GAEjBD,UAFiB,CAExCC,YAFwC;AAAA,MAE1BC,IAF0B,GAEjBF,UAFiB,CAE1BE,IAF0B;;AAAA,mBAGzBP,SAAS,EAHgB;AAAA,MAGxCQ,UAHwC,cAGxCA,UAHwC;;AAKhD,MAAMC,mBAAmB,GAAGV,OAAO,CAAC;AAAA,WAAMO,YAAY,IACpDI,KAAK,CAACC,OAAN,CAAcL,YAAd,CADwC,IACTA,YAAY,CAACM,IAAb,CAAkB,UAACC,WAAD;AAAA,aAAiBA,WAAW,CAACT,SAAZ,KAA0BA,SAA3C;AAAA,KAAlB,CADG;AAAA,GAAD,EACuE,CAACE,YAAD,EAAeF,SAAf,CADvE,CAAnC;AAGA,MAAMU,CAAC,GAAGhB,WAAW,CAAC,UAACiB,GAAD,EAAS;AAAE;AAC/B,QAAIP,UAAJ,EAAgB;AACd,0BAAO,oBAAC,QAAD;AAAU,QAAA,OAAO,EAAC,MAAlB;AAAyB,QAAA,KAAK,EAAEO,GAAG,GAAGA,GAAG,CAACC,MAAJ,GAAa,EAAhB,GAAqB,EAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AAED,QAAI,CAACP,mBAAL,EAA0B;AACxB;AACAQ,MAAAA,OAAO,CAACC,IAAR,sBAA2Bd,SAA3B,2BAAqDG,IAArD;AACA,aAAOQ,GAAP;AACD;;AAED,QAAI,CAACN,mBAAmB,CAACU,iBAArB,IAA0C,CAACV,mBAAmB,CAACU,iBAApB,CAAsCJ,GAAtC,CAA/C,EAA2F;AACzF;AACAE,MAAAA,OAAO,CAACC,IAAR,wBAA6BH,GAA7B,2BAAiDR,IAAjD;AACA,aAAOQ,GAAP;AACD;;AAED,WAAON,mBAAmB,CAACU,iBAApB,CAAsCJ,GAAtC,CAAP;AACD,GAlBoB,EAkBlB,CAACN,mBAAD,CAlBkB,CAArB;AAoBA,SAAO;AACLK,IAAAA,CAAC,EAADA,CADK;AACF;AACHM,IAAAA,MAAM,EAAEb,IAAI,IAAI;AAFX,GAAP;AAID;;GAhCuBJ,c;UAGCH,S","sourcesContent":["import { useContext, useCallback, useMemo } from \"react\";\nimport { useRouter } from \"next/router\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport { LocaleContext } from \"context/LocaleContext\";\n\n/**\n * Gets translations for a given namespace\n *\n * @param {String} namespace - the translation namespace\n * @returns {Object} Translations\n */\nexport default function useTranslation(namespace) {\n  const { localeData } = useContext(LocaleContext) || {};\n  const { translations, lang } = localeData;\n  const { isFallback } = useRouter();\n\n  const stringsForNamespace = useMemo(() => translations &&\n    Array.isArray(translations) && translations.find((translation) => translation.namespace === namespace), [translations, namespace]);\n\n  const t = useCallback((key) => { // eslint-disable-line id-length\n    if (isFallback) {\n      return <Skeleton variant=\"text\" width={key ? key.length * 10 : 30} />;\n    }\n\n    if (!stringsForNamespace) {\n      // eslint-disable-next-line no-console\n      console.warn(`Namespace '${namespace}' for locale '${lang}' not found.`);\n      return key;\n    }\n\n    if (!stringsForNamespace.translatedStrings || !stringsForNamespace.translatedStrings[key]) {\n      // eslint-disable-next-line no-console\n      console.warn(`Translation '${key}' for locale '${lang}' not found.`);\n      return key;\n    }\n\n    return stringsForNamespace.translatedStrings[key];\n  }, [stringsForNamespace]);\n\n  return {\n    t, // eslint-disable-line id-length\n    locale: lang || \"in\"\n  };\n}\n"]},"metadata":{},"sourceType":"module"}