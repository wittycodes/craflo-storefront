{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright Paperbits. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file and at https://paperbits.io/license/mit.\n */\nimport { ClickCounterModel } from \"./clickCounterModel\";\nexport let ClickCounterModelBinder = /*#__PURE__*/function () {\n  function ClickCounterModelBinder() {\n    _classCallCheck(this, ClickCounterModelBinder);\n  }\n\n  _createClass(ClickCounterModelBinder, [{\n    key: \"canHandleContract\",\n    value: function canHandleContract(contract) {\n      return contract.type === \"header\";\n    }\n  }, {\n    key: \"canHandleModel\",\n    value: function canHandleModel(model) {\n      return model instanceof ClickCounterModel;\n    }\n  }, {\n    key: \"contractToModel\",\n    value: async function contractToModel(contract) {\n      const model = new ClickCounterModel();\n      return model;\n    }\n  }, {\n    key: \"modelToContract\",\n    value: function modelToContract(model) {\n      const contract = {\n        type: \"header\"\n      };\n      return contract;\n    }\n  }]);\n\n  return ClickCounterModelBinder;\n}();","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/src/paperbits/components/header/clickCounterModelBinder.ts"],"names":["ClickCounterModel","ClickCounterModelBinder","contract","type","model"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,iBAAT,QAAkC,qBAAlC;AAIA,WAAaC,uBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,sCAC6BC,QAD7B,EAC0D;AAClD,aAAOA,QAAQ,CAACC,IAAT,KAAkB,QAAzB;AACH;AAHL;AAAA;AAAA,mCAK0BC,KAL1B,EAK6D;AACrD,aAAOA,KAAK,YAAYJ,iBAAxB;AACH;AAPL;AAAA;AAAA,0CASiCE,QATjC,EAS6F;AACrF,YAAME,KAAK,GAAG,IAAIJ,iBAAJ,EAAd;AACA,aAAOI,KAAP;AACH;AAZL;AAAA;AAAA,oCAc2BA,KAd3B,EAc+D;AACvD,YAAMF,QAA8B,GAAG;AACnCC,QAAAA,IAAI,EAAE;AAD6B,OAAvC;AAIA,aAAOD,QAAP;AACH;AApBL;;AAAA;AAAA","sourcesContent":["/**\n * @license\n * Copyright Paperbits. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file and at https://paperbits.io/license/mit.\n */\n\nimport { IModelBinder } from \"@paperbits/common/editing\";\nimport { ClickCounterModel } from \"./clickCounterModel\";\nimport { Contract } from \"@paperbits/common\";\nimport { ClickCounterContract } from \"./clickCounterContract\";\n\nexport class ClickCounterModelBinder implements IModelBinder<ClickCounterModel> {\n    public canHandleContract(contract: Contract): boolean {\n        return contract.type === \"header\";\n    }\n\n    public canHandleModel(model: ClickCounterModel): boolean {\n        return model instanceof ClickCounterModel;\n    }\n\n    public async contractToModel(contract: ClickCounterContract): Promise<ClickCounterModel> {\n        const model = new ClickCounterModel();\n        return model;\n    }\n\n    public modelToContract(model: ClickCounterModel): Contract {\n        const contract: ClickCounterContract = {\n            type: \"header\"\n        };\n\n        return contract;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}