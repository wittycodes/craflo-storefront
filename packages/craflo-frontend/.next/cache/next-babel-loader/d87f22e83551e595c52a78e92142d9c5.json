{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/usr/local/src/app/packages/craflo-frontend/src/reaction/context/AuthContext.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createContext, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport fetch from \"isomorphic-unfetch\";\nimport useSWR from \"swr\";\nimport { setAccessToken as setApolloToken } from \"lib/apollo/apolloClient\";\n\nconst fetcher = url => fetch(url).then(response => response.json());\n/**\n * Splits the user's full name into first and last name\n *\n * @param {Object} account - the users account\n * @returns {Object} users first and last name as object properties\n */\n\n\nfunction splitNames(account) {\n  let firstName = \"\";\n  let lastName = \"\";\n  const {\n    name\n  } = account;\n  const nameParts = name && name.split(\" \");\n\n  if (Array.isArray(nameParts)) {\n    [firstName, lastName] = nameParts;\n  }\n\n  return {\n    firstName,\n    lastName\n  };\n}\n\nexport const AuthContext = /*#__PURE__*/createContext({});\nexport const AuthProvider = ({\n  children\n}) => {\n  const {\n    0: accountId,\n    1: setAccountId\n  } = useState(null);\n  const {\n    0: accessToken,\n    1: setAccessToken\n  } = useState(null);\n  const {\n    0: account,\n    1: _setAccount\n  } = useState({});\n  const {\n    data: tokenData\n  } = useSWR(\"/api/account/token\", fetcher);\n  useEffect(() => {\n    const fetchedToken = tokenData && tokenData.accessToken;\n\n    if (fetchedToken) {\n      setAccessToken(fetchedToken);\n      setApolloToken(fetchedToken);\n    }\n  }, [tokenData]);\n\n  const setAccount = newAccount => {\n    if (newAccount) {\n      setAccountId(newAccount._id) || null;\n\n      _setAccount(_objectSpread(_objectSpread({}, splitNames(newAccount)), newAccount));\n    } else {\n      setAccountId(null);\n\n      _setAccount({});\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      accountId,\n      account,\n      accessToken,\n      setAccount,\n      setAccessToken,\n      isAuthenticated: !!accountId\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    },\n    __self: this\n  }, children);\n};\nAuthProvider.propTypes = {\n  children: PropTypes.node\n};","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/src/reaction/context/AuthContext.tsx"],"names":["createContext","useState","useEffect","PropTypes","fetch","useSWR","setAccessToken","setApolloToken","fetcher","url","then","response","json","splitNames","account","firstName","lastName","name","nameParts","split","Array","isArray","AuthContext","AuthProvider","children","accountId","setAccountId","accessToken","_setAccount","data","tokenData","fetchedToken","setAccount","newAccount","_id","isAuthenticated","propTypes","node"],"mappings":";;;;;;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAASC,cAAc,IAAIC,cAA3B,QAAiD,yBAAjD;;AAEA,MAAMC,OAAO,GAAIC,GAAD,IAASL,KAAK,CAACK,GAAD,CAAL,CAAWC,IAAX,CAAiBC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAA9B,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAC3B,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAWH,OAAjB;AACA,QAAMI,SAAS,GAAGD,IAAI,IAAIA,IAAI,CAACE,KAAL,CAAW,GAAX,CAA1B;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcH,SAAd,CAAJ,EAA8B;AAC5B,KAACH,SAAD,EAAYC,QAAZ,IAAwBE,SAAxB;AACD;;AAED,SAAO;AACLH,IAAAA,SADK;AAELC,IAAAA;AAFK,GAAP;AAID;;AAED,OAAO,MAAMM,WAAW,gBAAGtB,aAAa,CAAC,EAAD,CAAjC;AAEP,OAAO,MAAMuB,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC5C,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BzB,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM;AAAA,OAAC0B,WAAD;AAAA,OAAcrB;AAAd,MAAgCL,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM;AAAA,OAACa,OAAD;AAAA,OAAUc;AAAV,MAAyB3B,QAAQ,CAAC,EAAD,CAAvC;AAEA,QAAM;AAAE4B,IAAAA,IAAI,EAAEC;AAAR,MAAsBzB,MAAM,CAAC,oBAAD,EAAuBG,OAAvB,CAAlC;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM6B,YAAY,GAAGD,SAAS,IAAIA,SAAS,CAACH,WAA5C;;AACA,QAAII,YAAJ,EAAkB;AAChBzB,MAAAA,cAAc,CAACyB,YAAD,CAAd;AACAxB,MAAAA,cAAc,CAACwB,YAAD,CAAd;AACD;AACF,GANQ,EAMN,CAACD,SAAD,CANM,CAAT;;AAQA,QAAME,UAAU,GAAIC,UAAD,IAAgB;AACjC,QAAIA,UAAJ,EAAgB;AACdP,MAAAA,YAAY,CAACO,UAAU,CAACC,GAAZ,CAAZ,IAAgC,IAAhC;;AACAN,MAAAA,WAAW,iCAAMf,UAAU,CAACoB,UAAD,CAAhB,GAAiCA,UAAjC,EAAX;AACD,KAHD,MAGO;AACLP,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACAE,MAAAA,WAAW,CAAC,EAAD,CAAX;AACD;AACF,GARD;;AAUA,sBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAC3BH,MAAAA,SAD2B;AAE3BX,MAAAA,OAF2B;AAG3Ba,MAAAA,WAH2B;AAI3BK,MAAAA,UAJ2B;AAK3B1B,MAAAA,cAL2B;AAM3B6B,MAAAA,eAAe,EAAE,CAAC,CAACV;AANQ,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGD,QATH,CADF;AAaD,CAtCM;AAwCPD,YAAY,CAACa,SAAb,GAAyB;AACvBZ,EAAAA,QAAQ,EAAErB,SAAS,CAACkC;AADG,CAAzB","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport fetch from \"isomorphic-unfetch\";\nimport useSWR from \"swr\";\nimport { setAccessToken as setApolloToken } from \"lib/apollo/apolloClient\";\n\nconst fetcher = (url) => fetch(url).then((response) => response.json());\n\n/**\n * Splits the user's full name into first and last name\n *\n * @param {Object} account - the users account\n * @returns {Object} users first and last name as object properties\n */\nfunction splitNames(account) {\n  let firstName = \"\";\n  let lastName = \"\";\n  const { name } = account;\n  const nameParts = name && name.split(\" \");\n  if (Array.isArray(nameParts)) {\n    [firstName, lastName] = nameParts;\n  }\n\n  return {\n    firstName,\n    lastName\n  };\n}\n\nexport const AuthContext = createContext({} as any);\n\nexport const AuthProvider = ({ children }) => {\n  const [accountId, setAccountId] = useState(null);\n  const [accessToken, setAccessToken] = useState(null);\n  const [account, _setAccount] = useState({});\n\n  const { data: tokenData } = useSWR(\"/api/account/token\", fetcher);\n\n  useEffect(() => {\n    const fetchedToken = tokenData && tokenData.accessToken;\n    if (fetchedToken) {\n      setAccessToken(fetchedToken);\n      setApolloToken(fetchedToken);\n    }\n  }, [tokenData]);\n\n  const setAccount = (newAccount) => {\n    if (newAccount) {\n      setAccountId(newAccount._id) || null;\n      _setAccount({ ...splitNames(newAccount), ...newAccount });\n    } else {\n      setAccountId(null);\n      _setAccount({});\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{\n      accountId,\n      account,\n      accessToken,\n      setAccount,\n      setAccessToken,\n      isAuthenticated: !!accountId\n    }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nAuthProvider.propTypes = {\n  children: PropTypes.node\n};\n"]},"metadata":{},"sourceType":"module"}