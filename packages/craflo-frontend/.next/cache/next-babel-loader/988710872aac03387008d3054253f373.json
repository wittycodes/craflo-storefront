{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\n/**\n * @license\n * Copyright Paperbits. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file and at https://paperbits.io/license/mit.\n */\nimport * as Utils from \"@paperbits/common/utils\";\n\n/**\n * Static blob storage for demo purposes. It stores all the uploaded blobs in memory.\n */\nexport var StaticBlobStorage = /*#__PURE__*/function () {\n  function StaticBlobStorage() {\n    _classCallCheck(this, StaticBlobStorage);\n\n    _defineProperty(this, \"storageDataObject\", {});\n  }\n\n  _createClass(StaticBlobStorage, [{\n    key: \"uploadBlob\",\n\n    /**\n     * Uploads specified content into browser memory and stores it as base64 string.\n     * @param blobKey \n     * @param content \n     * @param contentType \n     */\n    value: function () {\n      var _uploadBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(blobKey, content, contentType) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.storageDataObject[blobKey] = {\n                  contentType: contentType,\n                  content: content\n                };\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function uploadBlob(_x, _x2, _x3) {\n        return _uploadBlob.apply(this, arguments);\n      }\n\n      return uploadBlob;\n    }()\n    /**\n     * Returns download URL of uploaded blob.\n     * @param blobKey \n     */\n\n  }, {\n    key: \"getDownloadUrl\",\n    value: function () {\n      var _getDownloadUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(blobKey) {\n        var blobRecord;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                blobRecord = this.storageDataObject[blobKey];\n\n                if (blobRecord) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", null);\n\n              case 3:\n                return _context2.abrupt(\"return\", \"data:\".concat(blobRecord.contentType, \";base64,\").concat(Utils.arrayBufferToBase64(blobRecord.content)));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getDownloadUrl(_x4) {\n        return _getDownloadUrl.apply(this, arguments);\n      }\n\n      return getDownloadUrl;\n    }()\n    /**\n     * Removes specified blob from memory.\n     * @param blobKey \n     */\n\n  }, {\n    key: \"deleteBlob\",\n    value: function () {\n      var _deleteBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(blobKey) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                delete this.storageDataObject[blobKey];\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function deleteBlob(_x5) {\n        return _deleteBlob.apply(this, arguments);\n      }\n\n      return deleteBlob;\n    }()\n  }, {\n    key: \"downloadBlob\",\n    value: function () {\n      var _downloadBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(blobKey) {\n        var blobRecord;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                blobRecord = this.storageDataObject[blobKey];\n\n                if (!blobRecord) {\n                  _context4.next = 5;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", blobRecord.content);\n\n              case 5:\n                return _context4.abrupt(\"return\", null);\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function downloadBlob(_x6) {\n        return _downloadBlob.apply(this, arguments);\n      }\n\n      return downloadBlob;\n    }()\n  }]);\n\n  return StaticBlobStorage;\n}();","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/src/paperbits/persistence/staticBlobStorage.ts"],"names":["Utils","StaticBlobStorage","blobKey","content","contentType","storageDataObject","blobRecord","arrayBufferToBase64"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,OAAO,KAAKA,KAAZ,MAAuB,yBAAvB;;AAIA;AACA;AACA;AACA,WAAaC,iBAAb;AAAA;AAAA;;AAAA,+CACgC,EADhC;AAAA;;AAAA;AAAA;;AAGI;AACJ;AACA;AACA;AACA;AACA;AARA;AAAA,kGAS4BC,OAT5B,EAS6CC,OAT7C,EASkEC,WATlE;AAAA;AAAA;AAAA;AAAA;AAUQ,qBAAKC,iBAAL,CAAuBH,OAAvB,IAAkC;AAC9BE,kBAAAA,WAAW,EAAEA,WADiB;AAE9BD,kBAAAA,OAAO,EAAEA;AAFqB,iBAAlC;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAgBI;AACJ;AACA;AACA;;AAnBA;AAAA;AAAA;AAAA,uGAoBgCD,OApBhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBcI,gBAAAA,UArBd,GAqB2B,KAAKD,iBAAL,CAAuBH,OAAvB,CArB3B;;AAAA,oBAuBaI,UAvBb;AAAA;AAAA;AAAA;;AAAA,kDAwBmB,IAxBnB;;AAAA;AAAA,iEA2BuBA,UAAU,CAACF,WA3BlC,qBA2BwDJ,KAAK,CAACO,mBAAN,CAA0BD,UAAU,CAACH,OAArC,CA3BxD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA8BI;AACJ;AACA;AACA;;AAjCA;AAAA;AAAA;AAAA,mGAkC4BD,OAlC5B;AAAA;AAAA;AAAA;AAAA;AAmCQ,uBAAO,KAAKG,iBAAL,CAAuBH,OAAvB,CAAP;;AAnCR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qGAsC+BA,OAtC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAuCcI,gBAAAA,UAvCd,GAuC2B,KAAKD,iBAAL,CAAuBH,OAAvB,CAvC3B;;AAAA,qBAyCYI,UAzCZ;AAAA;AAAA;AAAA;;AAAA,kDA0CmBA,UAAU,CAACH,OA1C9B;;AAAA;AAAA,kDA6CmB,IA7CnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA","sourcesContent":["/**\n * @license\n * Copyright Paperbits. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file and at https://paperbits.io/license/mit.\n */\n\n\nimport * as Utils from \"@paperbits/common/utils\";\nimport { IBlobStorage } from \"@paperbits/common/persistence\";\n\n\n/**\n * Static blob storage for demo purposes. It stores all the uploaded blobs in memory.\n */\nexport class StaticBlobStorage implements IBlobStorage {\n    private storageDataObject = {};\n\n    /**\n     * Uploads specified content into browser memory and stores it as base64 string.\n     * @param blobKey \n     * @param content \n     * @param contentType \n     */\n    public async uploadBlob(blobKey: string, content: Uint8Array, contentType?: string): Promise<void> {\n        this.storageDataObject[blobKey] = {\n            contentType: contentType,\n            content: content\n        };\n    }\n\n    /**\n     * Returns download URL of uploaded blob.\n     * @param blobKey \n     */\n    public async getDownloadUrl(blobKey: string): Promise<string> {\n        const blobRecord = this.storageDataObject[blobKey];\n\n        if (!blobRecord) {\n            return null;\n        }\n\n        return `data:${blobRecord.contentType};base64,${Utils.arrayBufferToBase64(blobRecord.content)}`;\n    }\n\n    /**\n     * Removes specified blob from memory.\n     * @param blobKey \n     */\n    public async deleteBlob(blobKey: string): Promise<void> {\n        delete this.storageDataObject[blobKey];\n    }\n\n    public async downloadBlob?(blobKey: string): Promise<Uint8Array> {\n        const blobRecord = this.storageDataObject[blobKey];\n\n        if (blobRecord) {\n            return blobRecord.content;\n        }\n        else {\n            return null;\n        }\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}