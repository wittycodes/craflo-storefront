{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useMemo, useCallback } from \"react\";\nimport { useQuery, useMutation, useApolloClient } from \"@apollo/client\";\nimport useStores from \"hooks/useStores\";\nimport useViewer from \"hooks/viewer/useViewer\";\nimport cartItemsConnectionToArray from \"lib/utils/cartItemsConnectionToArray\";\nimport { createCartMutation, addCartItemsMutation, removeCartItemsMutation, reconcileCartsMutation, setEmailOnAnonymousCartMutation, setFulfillmentOptionCartMutation, setShippingAddressCartMutation, updateCartItemsQuantityMutation, updateFulfillmentOptionsForGroup } from \"./mutations.gql\";\nimport { accountCartByAccountIdQuery, anonymousCartByCartIdQuery } from \"./queries.gql\";\n/**\n * Hook to get cart information\n *\n * @returns {Object} the user's current cart\n */\n\nexport default function useCart(shopId) {\n  _s();\n\n  // const cartWithShopHook = () => {\n  var _useStores = useStores(),\n      cartStore = _useStores.cartStore;\n\n  var _useViewer = useViewer(),\n      _useViewer2 = _slicedToArray(_useViewer, 2),\n      viewer = _useViewer2[0],\n      isLoadingViewer = _useViewer2[1];\n\n  var apolloClient = useApolloClient();\n  var accountId = viewer && viewer._id;\n  console.log(viewer, accountId, \"LALLL\");\n  var shouldSkipAccountCartByAccountIdQuery = Boolean(!accountId || cartStore.hasAnonymousCartCredentials(shopId) || isLoadingViewer || !shopId);\n  var shouldSkipAnonymousCartByCartIdQuery = Boolean(accountId || isLoadingViewer || !cartStore.hasAnonymousCartCredentials(shopId));\n\n  var _useQuery = useQuery(accountCartByAccountIdQuery, {\n    skip: shouldSkipAccountCartByAccountIdQuery,\n    variables: {\n      accountId: accountId,\n      shopId: shopId\n    },\n    pollInterval: shouldSkipAccountCartByAccountIdQuery ? 0 : 2000\n  }),\n      isLoading = _useQuery.loading,\n      cartData = _useQuery.data,\n      fetchMore = _useQuery.fetchMore,\n      refetchCart = _useQuery.refetch;\n\n  var _useQuery2 = useQuery(anonymousCartByCartIdQuery, {\n    skip: shouldSkipAnonymousCartByCartIdQuery,\n    variables: {\n      cartId: cartStore.anonymousCartId[shopId],\n      cartToken: cartStore.anonymousCartToken[shopId]\n    },\n    pollInterval: shouldSkipAnonymousCartByCartIdQuery ? 0 : 2000\n  }),\n      cartDataAnonymous = _useQuery2.data,\n      refetchCartAnonymous = _useQuery2.refetch;\n\n  useEffect(function () {\n    if (!shouldSkipAccountCartByAccountIdQuery) {\n      refetchCart();\n    }\n\n    if (!shouldSkipAnonymousCartByCartIdQuery) {\n      refetchCartAnonymous();\n    }\n  }, [viewer, refetchCart]);\n  var cart = useMemo(function () {\n    if (!shouldSkipAccountCartByAccountIdQuery && cartData) {\n      return cartData.cart;\n    }\n\n    if (!shouldSkipAnonymousCartByCartIdQuery && cartDataAnonymous) {\n      return cartDataAnonymous.cart;\n    }\n\n    return {};\n  }, [cartData, cartDataAnonymous, shouldSkipAccountCartByAccountIdQuery, shouldSkipAnonymousCartByCartIdQuery]);\n  var pageInfo = useMemo(function () {\n    if (cart && cart.items) return cart.items.pageInfo;\n    return {};\n  }, [cart]); // With an authenticated cart, set the accountCartId for later use\n\n  useEffect(function () {\n    if (cart && cart.account && cart.account._id === (viewer && viewer._id)) {\n      cartStore.setAccountCartId(_defineProperty({}, shopId, cart._id));\n    } else {\n      cartStore.setAccountCartId(_defineProperty({}, shopId, null));\n    }\n  }, [cart, cartStore.setAccountCartId, viewer]);\n\n  var cartIdAndCartToken = function cartIdAndCartToken() {\n    var accountCartId = cartStore.accountCartId,\n        anonymousCartId = cartStore.anonymousCartId,\n        anonymousCartToken = cartStore.anonymousCartToken;\n    var cartToken = {};\n\n    if (!accountCartId[shopId]) {\n      cartToken = {\n        cartToken: anonymousCartToken[shopId]\n      };\n    }\n\n    return _objectSpread({\n      cartId: accountCartId[shopId] || anonymousCartId[shopId]\n    }, cartToken);\n  };\n\n  var _useMutation = useMutation(cart && cart._id ? addCartItemsMutation : createCartMutation, {\n    onCompleted: function onCompleted(addOrCreateCartMutationData) {\n      if (addOrCreateCartMutationData && addOrCreateCartMutationData.createCart && (!viewer || !viewer._id)) {\n        var _addOrCreateCartMutat = addOrCreateCartMutationData.createCart,\n            cartPayload = _addOrCreateCartMutat.cart,\n            token = _addOrCreateCartMutat.token; //--console.log(addOrCreateCartMutationData)\n\n        cartStore.setAnonymousCartCredentials(cartPayload._id, token, shopId);\n      }\n\n      refetchCart();\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      addOrCreateCartMutation = _useMutation2[0],\n      addOrCreateCartLoading = _useMutation2[1].loading;\n\n  var _useMutation3 = useMutation(removeCartItemsMutation, {\n    update: function update(cache, _ref) {\n      var mutationData = _ref.data;\n\n      if (mutationData && mutationData.removeCartItems) {\n        var cartPayload = mutationData.removeCartItems.cart;\n\n        if (cartPayload) {\n          // Update Apollo cache\n          cache.writeQuery({\n            query: cartPayload.account ? accountCartByAccountIdQuery : anonymousCartByCartIdQuery,\n            data: {\n              cart: cartPayload\n            }\n          });\n        }\n      }\n    }\n  }),\n      _useMutation4 = _slicedToArray(_useMutation3, 2),\n      removeCartItemsMutationFun = _useMutation4[0],\n      removeCartItemsLoading = _useMutation4[1].loading;\n\n  var handleRemoveCartItems = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(itemIds) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", removeCartItemsMutationFun({\n                variables: {\n                  input: {\n                    cartId: cartStore.anonymousCartId[shopId] || cartStore.accountCartId[shopId],\n                    cartItemIds: Array.isArray(itemIds) && itemIds || [itemIds],\n                    cartToken: cartStore.anonymousCartToken[shopId] || null\n                  }\n                }\n              }));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [cartStore.anonymousCartId[shopId], cartStore.accountCartId[shopId], cartStore.anonymousCartToken[shopId]]);\n\n  var handleAddItemsToCart = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data, isCreating) {\n      var input, anonymousCartId, anonymousCartToken;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              input = {\n                items: data.items\n              };\n\n              if (!isCreating && (!viewer || !viewer._id) && cartStore.hasAnonymousCartCredentials(shopId)) {\n                // Given an anonymous user, with a cart, add token and cartId to input\n                anonymousCartId = cartStore.anonymousCartId, anonymousCartToken = cartStore.anonymousCartToken; // Add items to an existing anonymous cart\n\n                input.cartToken = anonymousCartToken[shopId];\n                input.cartId = anonymousCartId[shopId];\n              } else if (!isCreating && viewer && viewer._id && cartStore.hasAccountCart(shopId)) {\n                // With an account and an account cart, set the accountCartId on the input object\n                input.cartId = cartStore.accountCartId[shopId];\n              } else if (isCreating) {\n                // With no anonymous or account cart, add shop Id to input as it will be needed for the create cart mutation\n                input.shopId = shopId;\n              } // Run the mutation function provided as a param.\n              // It may take the form of `createCart` or `addCartItems` depending on the\n              // availability of a cart for either an anonymous or logged-in account.\n\n\n              return _context2.abrupt(\"return\", addOrCreateCartMutation({\n                variables: {\n                  input: input\n                }\n              }));\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleAddItemsToCart(_x2, _x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleUpdateFulfillmentOptionsForGroup = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(fulfillmentGroupId) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return apolloClient.mutate({\n                mutation: updateFulfillmentOptionsForGroup,\n                variables: {\n                  input: _objectSpread(_objectSpread({}, cartIdAndCartToken()), {}, {\n                    fulfillmentGroupId: fulfillmentGroupId\n                  })\n                }\n              });\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function handleUpdateFulfillmentOptionsForGroup(_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }(); // If we are authenticated, reconcile carts\n\n\n  useEffect(function () {\n    if (cartStore.hasAnonymousCartCredentials(shopId) && viewer && viewer._id && cartStore.isReconcilingCarts === false) {\n      // Prevent multiple calls to reconcile cart mutations when one is currently in progress\n      cartStore.setIsReconcilingCarts(true);\n      apolloClient.mutate({\n        mutation: reconcileCartsMutation,\n        update: function update(cache, _ref5) {\n          var mutationData = _ref5.data;\n\n          // If the mutation data contains a createCart object and we are an anonymous user,\n          // then set the anonymous cart details\n          if (mutationData && mutationData.reconcileCarts) {\n            var cartPayload = mutationData.reconcileCarts.cart;\n\n            if (cartPayload) {\n              // Clear anonymous account credentials\n              cartStore.clearAnonymousCartCredentials(shopId); // Update cache for account cart query\n\n              cache.writeQuery({\n                query: accountCartByAccountIdQuery,\n                data: {\n                  cart: cartPayload\n                }\n              }); // Refetch cart\n\n              refetchCart && refetchCart();\n            }\n          }\n\n          cartStore.setIsReconcilingCarts(false);\n        },\n        variables: {\n          input: {\n            anonymousCartId: cartStore.anonymousCartId[shopId],\n            cartToken: cartStore.anonymousCartToken[shopId],\n            shopId: shopId\n          }\n        }\n      });\n    }\n  }, [viewer, function () {\n    return cartStore.hasAnonymousCartCredentials(shopId);\n  }, cartStore.isReconcilingCarts, apolloClient]);\n  var processedCartData = null;\n\n  if (cart) {\n    processedCartData = _objectSpread(_objectSpread({}, cart), {}, {\n      items: cartItemsConnectionToArray(cart.items)\n    });\n  }\n\n  return {\n    addItemsToCart: function addItemsToCart(items) {\n      return handleAddItemsToCart({\n        items: items\n      }, !cart || !cart._id);\n    },\n    addOrCreateCartLoading: addOrCreateCartLoading,\n    cart: processedCartData,\n    checkoutMutations: {\n      onSetFulfillmentOption: function () {\n        var _onSetFulfillmentOption = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref6) {\n          var fulfillmentGroupId, fulfillmentMethodId, cartIdData, response;\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  fulfillmentGroupId = _ref6.fulfillmentGroupId, fulfillmentMethodId = _ref6.fulfillmentMethodId;\n                  cartIdData = cartIdAndCartToken();\n\n                  if (cartIdData.cartId) {\n                    _context4.next = 4;\n                    break;\n                  }\n\n                  return _context4.abrupt(\"return\", null);\n\n                case 4:\n                  _context4.next = 6;\n                  return apolloClient.mutate({\n                    mutation: setFulfillmentOptionCartMutation,\n                    variables: {\n                      input: _objectSpread(_objectSpread({}, cartIdData), {}, {\n                        fulfillmentGroupId: fulfillmentGroupId,\n                        fulfillmentMethodId: fulfillmentMethodId\n                      })\n                    }\n                  });\n\n                case 6:\n                  response = _context4.sent;\n                  return _context4.abrupt(\"return\", response);\n\n                case 8:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }));\n\n        function onSetFulfillmentOption(_x5) {\n          return _onSetFulfillmentOption.apply(this, arguments);\n        }\n\n        return onSetFulfillmentOption;\n      }(),\n      onSetShippingAddress: function () {\n        var _onSetShippingAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(address) {\n          var response, setShippingAddressOnCart;\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return apolloClient.mutate({\n                    mutation: setShippingAddressCartMutation,\n                    variables: {\n                      input: _objectSpread(_objectSpread({}, cartIdAndCartToken()), {}, {\n                        address: address\n                      })\n                    }\n                  });\n\n                case 2:\n                  response = _context5.sent;\n                  // Update fulfillment options for current cart\n                  setShippingAddressOnCart = response.data.setShippingAddressOnCart;\n                  handleUpdateFulfillmentOptionsForGroup(setShippingAddressOnCart.cart.checkout.fulfillmentGroups[0]._id);\n                  return _context5.abrupt(\"return\", response);\n\n                case 6:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        function onSetShippingAddress(_x6) {\n          return _onSetShippingAddress.apply(this, arguments);\n        }\n\n        return onSetShippingAddress;\n      }()\n    },\n    hasMoreCartItems: pageInfo && pageInfo.hasNextPage || false,\n    isLoadingCart: isLoadingViewer || isLoading,\n    loadMoreCartItems: function loadMoreCartItems() {\n      fetchMore({\n        variables: {\n          itemsAfterCursor: pageInfo && pageInfo.endCursor || null\n        },\n        updateQuery: function updateQuery(previousResult, _ref7) {\n          var fetchMoreResult = _ref7.fetchMoreResult;\n          var fetchMoreCart = fetchMoreResult.cart; // Check for additional items from result\n\n          if (fetchMoreCart && fetchMoreCart.items && Array.isArray(fetchMoreCart.items.edges) && fetchMoreCart.items.edges.length) {\n            // Merge previous cart items with next cart items\n            return _objectSpread(_objectSpread({}, fetchMoreResult), {}, {\n              cart: _objectSpread(_objectSpread({}, fetchMoreCart), {}, {\n                items: {\n                  __typename: previousResult.cart.items.__typename,\n                  pageInfo: fetchMoreCart.items.pageInfo,\n                  edges: [].concat(_toConsumableArray(previousResult.cart.items.edges), _toConsumableArray(fetchMoreCart.items.edges))\n                }\n              })\n            });\n          } // Send the previous result if the new result contains no additional data\n\n\n          return previousResult;\n        }\n      });\n    },\n    onChangeCartItemsQuantity: function () {\n      var _onChangeCartItemsQuantity = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(cartItems) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return apolloClient.mutate({\n                  mutation: updateCartItemsQuantityMutation,\n                  variables: {\n                    input: {\n                      cartId: cartStore.anonymousCartId[shopId] || cartStore.accountCartId[shopId],\n                      items: Array.isArray(cartItems) && cartItems || [cartItems],\n                      cartToken: cartStore.anonymousCartToken[shopId] || null\n                    }\n                  },\n                  update: function update(cache, _ref8) {\n                    var mutationData = _ref8.data;\n\n                    if (mutationData && mutationData.updateCartItemsQuantity) {\n                      var cartPayload = mutationData.updateCartItemsQuantity.cart;\n\n                      if (cartPayload) {\n                        // Update Apollo cache\n                        cache.writeQuery({\n                          query: cartPayload.account ? accountCartByAccountIdQuery : anonymousCartByCartIdQuery,\n                          data: {\n                            cart: cartPayload\n                          }\n                        });\n                      }\n                    }\n                  }\n                });\n\n              case 2:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function onChangeCartItemsQuantity(_x7) {\n        return _onChangeCartItemsQuantity.apply(this, arguments);\n      }\n\n      return onChangeCartItemsQuantity;\n    }(),\n    onRemoveCartItems: handleRemoveCartItems,\n    removeCartItemsLoading: removeCartItemsLoading,\n    clearAuthenticatedUsersCart: function clearAuthenticatedUsersCart() {\n      if (viewer && viewer._id) {\n        apolloClient.cache.writeQuery({\n          query: accountCartByAccountIdQuery,\n          data: {\n            cart: null\n          },\n          variables: {\n            accountId: viewer && viewer._id,\n            shopId: shopId\n          }\n        });\n      }\n    },\n    refetchCart: refetchCart,\n    setEmailOnAnonymousCart: function () {\n      var _setEmailOnAnonymousCart = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_ref9) {\n        var email;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                email = _ref9.email;\n                _context7.next = 3;\n                return apolloClient.mutate({\n                  mutation: setEmailOnAnonymousCartMutation,\n                  variables: {\n                    input: _objectSpread(_objectSpread({}, cartIdAndCartToken()), {}, {\n                      email: email\n                    })\n                  }\n                });\n\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function setEmailOnAnonymousCart(_x8) {\n        return _setEmailOnAnonymousCart.apply(this, arguments);\n      }\n\n      return setEmailOnAnonymousCart;\n    }()\n  }; // }\n  // return cartWithShopHook\n}\n\n_s(useCart, \"Ic7umSgDrmZRqFfoO/LRbDIwQts=\", false, function () {\n  return [useStores, useViewer, useApolloClient, useQuery, useQuery, useMutation, useMutation];\n});","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/src/reaction/hooks/cart/useCart.tsx"],"names":["useEffect","useMemo","useCallback","useQuery","useMutation","useApolloClient","useStores","useViewer","cartItemsConnectionToArray","createCartMutation","addCartItemsMutation","removeCartItemsMutation","reconcileCartsMutation","setEmailOnAnonymousCartMutation","setFulfillmentOptionCartMutation","setShippingAddressCartMutation","updateCartItemsQuantityMutation","updateFulfillmentOptionsForGroup","accountCartByAccountIdQuery","anonymousCartByCartIdQuery","useCart","shopId","cartStore","viewer","isLoadingViewer","apolloClient","accountId","_id","console","log","shouldSkipAccountCartByAccountIdQuery","Boolean","hasAnonymousCartCredentials","shouldSkipAnonymousCartByCartIdQuery","skip","variables","pollInterval","isLoading","loading","cartData","data","fetchMore","refetchCart","refetch","cartId","anonymousCartId","cartToken","anonymousCartToken","cartDataAnonymous","refetchCartAnonymous","cart","pageInfo","items","account","setAccountCartId","cartIdAndCartToken","accountCartId","onCompleted","addOrCreateCartMutationData","createCart","cartPayload","token","setAnonymousCartCredentials","addOrCreateCartMutation","addOrCreateCartLoading","update","cache","mutationData","removeCartItems","writeQuery","query","removeCartItemsMutationFun","removeCartItemsLoading","handleRemoveCartItems","itemIds","input","cartItemIds","Array","isArray","handleAddItemsToCart","isCreating","hasAccountCart","handleUpdateFulfillmentOptionsForGroup","fulfillmentGroupId","mutate","mutation","isReconcilingCarts","setIsReconcilingCarts","reconcileCarts","clearAnonymousCartCredentials","processedCartData","addItemsToCart","checkoutMutations","onSetFulfillmentOption","fulfillmentMethodId","cartIdData","response","onSetShippingAddress","address","setShippingAddressOnCart","checkout","fulfillmentGroups","hasMoreCartItems","hasNextPage","isLoadingCart","loadMoreCartItems","itemsAfterCursor","endCursor","updateQuery","previousResult","fetchMoreResult","fetchMoreCart","edges","length","__typename","onChangeCartItemsQuantity","cartItems","updateCartItemsQuantity","onRemoveCartItems","clearAuthenticatedUsersCart","setEmailOnAnonymousCart","email"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useCallback } from \"react\";\nimport { useQuery, useMutation, useApolloClient } from \"@apollo/client\";\nimport useStores from \"hooks/useStores\";\nimport useShop from \"hooks/shop/useShop\";\nimport useMerchantShop from \"hooks/shop/useMerchantShop\";\nimport useViewer from \"hooks/viewer/useViewer\";\nimport cartItemsConnectionToArray from \"lib/utils/cartItemsConnectionToArray\";\nimport {\n  createCartMutation,\n  addCartItemsMutation,\n  removeCartItemsMutation,\n  reconcileCartsMutation,\n  setEmailOnAnonymousCartMutation,\n  setFulfillmentOptionCartMutation,\n  setShippingAddressCartMutation,\n  updateCartItemsQuantityMutation,\n  updateFulfillmentOptionsForGroup\n} from \"./mutations.gql\";\nimport {\n  accountCartByAccountIdQuery,\n  anonymousCartByCartIdQuery\n} from \"./queries.gql\";\n\n\n/**\n * Hook to get cart information\n *\n * @returns {Object} the user's current cart\n */\nexport default function useCart(shopId) {\n  // const cartWithShopHook = () => {\n    const {cartStore} = useStores();\n    const [viewer, isLoadingViewer] = useViewer();\n\n    const apolloClient = useApolloClient();\n    const accountId = viewer && viewer._id;\n\n    console.log(viewer, accountId, \"LALLL\")\n    const shouldSkipAccountCartByAccountIdQuery = Boolean(!accountId || cartStore.hasAnonymousCartCredentials(shopId) || isLoadingViewer || !shopId);\n    const shouldSkipAnonymousCartByCartIdQuery = Boolean(accountId || isLoadingViewer || !cartStore.hasAnonymousCartCredentials(shopId));\n\n\n    const {loading: isLoading, data: cartData, fetchMore, refetch: refetchCart} = useQuery(accountCartByAccountIdQuery, {\n      skip: shouldSkipAccountCartByAccountIdQuery,\n      variables: {\n        accountId,\n        shopId: shopId\n      },\n      pollInterval: shouldSkipAccountCartByAccountIdQuery ? 0 : 2000\n    });\n\n    const {data: cartDataAnonymous, refetch: refetchCartAnonymous} = useQuery(anonymousCartByCartIdQuery, {\n      skip: shouldSkipAnonymousCartByCartIdQuery,\n      variables: {\n        cartId: cartStore.anonymousCartId[shopId],\n        cartToken: cartStore.anonymousCartToken[shopId]\n      },\n      pollInterval: shouldSkipAnonymousCartByCartIdQuery ? 0 : 2000\n    });\n\n\n    useEffect(() => {\n      if (!shouldSkipAccountCartByAccountIdQuery) {\n        refetchCart();\n      }\n      if (!shouldSkipAnonymousCartByCartIdQuery) {\n        refetchCartAnonymous();\n      }\n    }, [viewer, refetchCart]);\n\n\n    const cart = useMemo(() => {\n      if (!shouldSkipAccountCartByAccountIdQuery && cartData) {\n        return cartData.cart;\n      }\n      if (!shouldSkipAnonymousCartByCartIdQuery && cartDataAnonymous) {\n        return cartDataAnonymous.cart;\n      }\n\n      return {};\n    }, [cartData, cartDataAnonymous, shouldSkipAccountCartByAccountIdQuery, shouldSkipAnonymousCartByCartIdQuery]);\n\n\n    const pageInfo = useMemo(() => {\n      if (cart && cart.items) return cart.items.pageInfo;\n      return {};\n    }, [cart]);\n\n\n    // With an authenticated cart, set the accountCartId for later use\n    useEffect(() => {\n      if (cart && cart.account && cart.account._id === (viewer && viewer._id)) {\n        cartStore.setAccountCartId({\n          [shopId]: cart._id\n        });\n      } else {\n        cartStore.setAccountCartId({\n          [shopId]: null\n        });\n      }\n    }, [cart, cartStore.setAccountCartId, viewer]);\n\n\n    const cartIdAndCartToken = () => {\n      const {accountCartId, anonymousCartId, anonymousCartToken} = cartStore;\n      let cartToken = {};\n      if (!accountCartId[shopId]) {\n        cartToken = {cartToken: anonymousCartToken[shopId]};\n      }\n\n      return {\n        cartId: accountCartId[shopId] || anonymousCartId[shopId],\n        ...cartToken\n      };\n    };\n\n\n    const [addOrCreateCartMutation, {\n      loading: addOrCreateCartLoading\n    }] = useMutation(cart && cart._id ? addCartItemsMutation : createCartMutation, {\n      onCompleted(addOrCreateCartMutationData) {\n        if (addOrCreateCartMutationData && addOrCreateCartMutationData.createCart && (!viewer || !viewer._id)) {\n          const {cart: cartPayload, token} = addOrCreateCartMutationData.createCart;\n          //--console.log(addOrCreateCartMutationData)\n          cartStore.setAnonymousCartCredentials(cartPayload._id, token, shopId);\n        }\n        refetchCart();\n      }\n    });\n\n    const [removeCartItemsMutationFun, {\n      loading: removeCartItemsLoading\n    }] = useMutation(removeCartItemsMutation, {\n      update(cache, {data: mutationData}) {\n        if (mutationData && mutationData.removeCartItems) {\n          const {cart: cartPayload} = mutationData.removeCartItems;\n\n          if (cartPayload) {\n            // Update Apollo cache\n            cache.writeQuery({\n              query: cartPayload.account ? accountCartByAccountIdQuery : anonymousCartByCartIdQuery,\n              data: {cart: cartPayload}\n            });\n          }\n        }\n      }\n    });\n\n    const handleRemoveCartItems = useCallback(async (itemIds) => removeCartItemsMutationFun({\n      variables: {\n        input: {\n          cartId: cartStore.anonymousCartId[shopId] || cartStore.accountCartId[shopId],\n          cartItemIds: (Array.isArray(itemIds) && itemIds) || [itemIds],\n          cartToken: cartStore.anonymousCartToken[shopId] || null\n        }\n      }\n    }), [cartStore.anonymousCartId[shopId], cartStore.accountCartId[shopId], cartStore.anonymousCartToken[shopId]]);\n\n\n    const handleAddItemsToCart = async (data, isCreating) => {\n      const input = {\n        items: data.items\n      };\n\n      if (!isCreating && (!viewer || !viewer._id) && cartStore.hasAnonymousCartCredentials(shopId)) {\n        // Given an anonymous user, with a cart, add token and cartId to input\n        const {anonymousCartId, anonymousCartToken} = cartStore;\n\n        // Add items to an existing anonymous cart\n        input.cartToken = anonymousCartToken[shopId];\n        input.cartId = anonymousCartId[shopId];\n\n      } else if (!isCreating && viewer && viewer._id && cartStore.hasAccountCart(shopId)) {\n        // With an account and an account cart, set the accountCartId on the input object\n        input.cartId = cartStore.accountCartId[shopId];\n      } else if (isCreating) {\n        // With no anonymous or account cart, add shop Id to input as it will be needed for the create cart mutation\n        input.shopId = shopId;\n      }\n\n      // Run the mutation function provided as a param.\n      // It may take the form of `createCart` or `addCartItems` depending on the\n      // availability of a cart for either an anonymous or logged-in account.\n      return addOrCreateCartMutation({\n        variables: {\n          input\n        }\n      });\n    };\n\n    const handleUpdateFulfillmentOptionsForGroup = async (fulfillmentGroupId) => {\n      await apolloClient.mutate({\n        mutation: updateFulfillmentOptionsForGroup,\n        variables: {\n          input: {\n            ...cartIdAndCartToken(),\n            fulfillmentGroupId\n          }\n        }\n      });\n    };\n\n\n    // If we are authenticated, reconcile carts\n    useEffect(() => {\n      if (cartStore.hasAnonymousCartCredentials(shopId) && viewer && viewer._id && cartStore.isReconcilingCarts === false) {\n        // Prevent multiple calls to reconcile cart mutations when one is currently in progress\n        cartStore.setIsReconcilingCarts(true);\n\n        apolloClient.mutate({\n          mutation: reconcileCartsMutation,\n          update: (cache, {data: mutationData}) => {\n            // If the mutation data contains a createCart object and we are an anonymous user,\n            // then set the anonymous cart details\n            if (mutationData && mutationData.reconcileCarts) {\n              const {cart: cartPayload} = mutationData.reconcileCarts;\n\n              if (cartPayload) {\n                // Clear anonymous account credentials\n                cartStore.clearAnonymousCartCredentials(shopId);\n\n                // Update cache for account cart query\n                cache.writeQuery({\n                  query: accountCartByAccountIdQuery,\n                  data: {cart: cartPayload}\n                });\n\n                // Refetch cart\n                refetchCart && refetchCart();\n              }\n            }\n            cartStore.setIsReconcilingCarts(false);\n          },\n          variables: {\n            input: {\n              anonymousCartId: cartStore.anonymousCartId[shopId],\n              cartToken: cartStore.anonymousCartToken[shopId],\n              shopId: shopId\n            }\n          }\n        });\n      }\n    }, [viewer, () => cartStore.hasAnonymousCartCredentials(shopId), cartStore.isReconcilingCarts, apolloClient]);\n\n    let processedCartData = null;\n    if (cart) {\n      processedCartData = {\n        ...cart,\n        items: cartItemsConnectionToArray(cart.items)\n      };\n    }\n\n    return {\n      addItemsToCart: (items) => handleAddItemsToCart({items}, !cart || !cart._id),\n      addOrCreateCartLoading,\n      cart: processedCartData,\n      checkoutMutations: {\n        onSetFulfillmentOption: async ({fulfillmentGroupId, fulfillmentMethodId}) => {\n          const cartIdData = cartIdAndCartToken();\n\n          if (!cartIdData.cartId) return null;\n\n          const response = await apolloClient.mutate({\n            mutation: setFulfillmentOptionCartMutation,\n            variables: {\n              input: {\n                ...cartIdData,\n                fulfillmentGroupId,\n                fulfillmentMethodId\n              }\n            }\n          });\n\n          return response;\n        },\n        onSetShippingAddress: async (address) => {\n          const response = await apolloClient.mutate({\n            mutation: setShippingAddressCartMutation,\n            variables: {\n              input: {\n                ...cartIdAndCartToken(),\n                address\n              }\n            }\n          });\n\n          // Update fulfillment options for current cart\n          const {data: {setShippingAddressOnCart}} = response;\n          handleUpdateFulfillmentOptionsForGroup(setShippingAddressOnCart.cart.checkout.fulfillmentGroups[0]._id);\n\n          return response;\n        }\n      },\n      hasMoreCartItems: (pageInfo && pageInfo.hasNextPage) || false,\n      isLoadingCart: isLoadingViewer || isLoading,\n      loadMoreCartItems: () => {\n        fetchMore({\n          variables: {\n            itemsAfterCursor: (pageInfo && pageInfo.endCursor) || null\n          },\n          updateQuery: (previousResult, {fetchMoreResult}) => {\n            const {cart: fetchMoreCart} = fetchMoreResult;\n\n            // Check for additional items from result\n            if (fetchMoreCart && fetchMoreCart.items && Array.isArray(fetchMoreCart.items.edges) && fetchMoreCart.items.edges.length) {\n              // Merge previous cart items with next cart items\n              return {\n                ...fetchMoreResult,\n                cart: {\n                  ...fetchMoreCart,\n                  items: {\n                    __typename: previousResult.cart.items.__typename,\n                    pageInfo: fetchMoreCart.items.pageInfo,\n                    edges: [\n                      ...previousResult.cart.items.edges,\n                      ...fetchMoreCart.items.edges\n                    ]\n                  }\n                }\n              };\n            }\n\n            // Send the previous result if the new result contains no additional data\n            return previousResult;\n          }\n        });\n      },\n      onChangeCartItemsQuantity: async (cartItems) => {\n        await apolloClient.mutate({\n          mutation: updateCartItemsQuantityMutation,\n          variables: {\n            input: {\n              cartId: cartStore.anonymousCartId[shopId] || cartStore.accountCartId[shopId],\n              items: (Array.isArray(cartItems) && cartItems) || [cartItems],\n              cartToken: cartStore.anonymousCartToken[shopId] || null\n            }\n          },\n          update: (cache, {data: mutationData}) => {\n            if (mutationData && mutationData.updateCartItemsQuantity) {\n              const {cart: cartPayload} = mutationData.updateCartItemsQuantity;\n\n              if (cartPayload) {\n                // Update Apollo cache\n                cache.writeQuery({\n                  query: cartPayload.account ? accountCartByAccountIdQuery : anonymousCartByCartIdQuery,\n                  data: {cart: cartPayload}\n                });\n              }\n            }\n          }\n        });\n      },\n      onRemoveCartItems: handleRemoveCartItems,\n      removeCartItemsLoading,\n      clearAuthenticatedUsersCart: () => {\n        if (viewer && viewer._id) {\n          apolloClient.cache.writeQuery({\n            query: accountCartByAccountIdQuery,\n            data: {cart: null},\n            variables: {\n              accountId: viewer && viewer._id,\n              shopId: shopId\n            }\n          });\n        }\n      },\n      refetchCart,\n      setEmailOnAnonymousCart: async ({email}) => {\n        await apolloClient.mutate({\n          mutation: setEmailOnAnonymousCartMutation,\n          variables: {\n            input: {\n              ...cartIdAndCartToken(),\n              email\n            }\n          }\n        });\n      }\n    }\n  // }\n  // return cartWithShopHook\n}\n"]},"metadata":{},"sourceType":"module"}