{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * @name cartItemsConnectionToArray\n * @summary Transform cart items relay style connection into a simple array of objects with some additional transformations\n * @param {Object} cartItemsConnection Cart items relay style connection\n * @param {Array.<Object>} items.edges An array of edges\n * @returns {Array.<Object>} Returns an array of cart item objects\n */\nexport default function cartItemsConnectionToArray(cartItemsConnection) {\n  // Return a blank array if you don't have good data to begin with\n  if (!cartItemsConnection || !cartItemsConnection.edges) {\n    return [];\n  } // Make a copy to be able to mutate array if items\n\n\n  const cartItems = [...cartItemsConnection.edges];\n  return cartItems.map(({\n    node\n  }) => {\n    // Make a copy to be able to mutate\n    const item = _objectSpread({}, node); // Backwards compatibility until all component library components are updated\n    // to accept `inventoryAvailableToSell`.\n\n\n    item.currentQuantity = item.currentQuantity || item.inventoryAvailableToSell;\n    return item;\n  });\n}","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/src/reaction/lib/utils/cartItemsConnectionToArray.tsx"],"names":["cartItemsConnectionToArray","cartItemsConnection","edges","cartItems","map","node","item","currentQuantity","inventoryAvailableToSell"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,0BAAT,CAAoCC,mBAApC,EAAyD;AACtE;AACA,MAAI,CAACA,mBAAD,IAAwB,CAACA,mBAAmB,CAACC,KAAjD,EAAwD;AACtD,WAAO,EAAP;AACD,GAJqE,CAMtE;;;AACA,QAAMC,SAAS,GAAG,CAAC,GAAGF,mBAAmB,CAACC,KAAxB,CAAlB;AAEA,SAAOC,SAAS,CAACC,GAAV,CAAc,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAc;AACjC;AACA,UAAMC,IAAI,qBAAQD,IAAR,CAAV,CAFiC,CAIjC;AACA;;;AACAC,IAAAA,IAAI,CAACC,eAAL,GAAuBD,IAAI,CAACC,eAAL,IAAwBD,IAAI,CAACE,wBAApD;AAEA,WAAOF,IAAP;AACD,GATM,CAAP;AAUD","sourcesContent":["/**\n * @name cartItemsConnectionToArray\n * @summary Transform cart items relay style connection into a simple array of objects with some additional transformations\n * @param {Object} cartItemsConnection Cart items relay style connection\n * @param {Array.<Object>} items.edges An array of edges\n * @returns {Array.<Object>} Returns an array of cart item objects\n */\nexport default function cartItemsConnectionToArray(cartItemsConnection) {\n  // Return a blank array if you don't have good data to begin with\n  if (!cartItemsConnection || !cartItemsConnection.edges) {\n    return [];\n  }\n\n  // Make a copy to be able to mutate array if items\n  const cartItems = [...cartItemsConnection.edges];\n\n  return cartItems.map(({ node }) => {\n    // Make a copy to be able to mutate\n    const item = { ...node };\n\n    // Backwards compatibility until all component library components are updated\n    // to accept `inventoryAvailableToSell`.\n    item.currentQuantity = item.currentQuantity || item.inventoryAvailableToSell;\n\n    return item;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}