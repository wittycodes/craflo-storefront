{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport dynamic from 'next/dynamic';\nvar ErrorMessage = dynamic(_c = function _c() {\n  return import('components/error-message/error-message');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('components/error-message/error-message')];\n    },\n    modules: ['components/error-message/error-message']\n  }\n});\n_c2 = ErrorMessage;\nvar QuickView = dynamic(_c3 = function _c3() {\n  return import('features/quick-view/quick-view');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('features/quick-view/quick-view')];\n    },\n    modules: ['features/quick-view/quick-view']\n  }\n});\n_c4 = QuickView;\nvar GeneralCard = dynamic(_c5 = function _c5() {\n  return import('components/product-card/product-card-one/product-card-one');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('components/product-card/product-card-one/product-card-one')];\n    },\n    modules: ['components/product-card/product-card-one/product-card-one']\n  }\n});\n_c6 = GeneralCard;\nvar BookCard = dynamic(_c7 = function _c7() {\n  return import('components/product-card/product-card-two/product-card-two');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('components/product-card/product-card-two/product-card-two')];\n    },\n    modules: ['components/product-card/product-card-two/product-card-two']\n  }\n});\n_c8 = BookCard;\nvar FurnitureCard = dynamic(_c9 = function _c9() {\n  return import('components/product-card/product-card-three/product-card-three');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('components/product-card/product-card-three/product-card-three')];\n    },\n    modules: ['components/product-card/product-card-three/product-card-three']\n  }\n});\n_c10 = FurnitureCard;\nvar MedicineCard = dynamic(_c11 = function _c11() {\n  return import('components/product-card/product-card-five/product-card-five');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('components/product-card/product-card-five/product-card-five')];\n    },\n    modules: ['components/product-card/product-card-five/product-card-five']\n  }\n});\n_c12 = MedicineCard;\nexport var Products = function Products(_ref) {\n  var deviceType = _ref.deviceType,\n      _ref$fetchLimit = _ref.fetchLimit,\n      fetchLimit = _ref$fetchLimit === void 0 ? 20 : _ref$fetchLimit,\n      _ref$loadMore = _ref.loadMore,\n      loadMore = _ref$loadMore === void 0 ? true : _ref$loadMore,\n      type = _ref.type;\n\n  /*\n  //--console.log(useCatalog)\n  //--console.log(\"Pulkitt\")\n    const {\n    catalogItems,\n    catalogItemsPageInfo,\n    isLoadingCatalogItems,\n    routingStore: { query },\n    shop,\n    uiStore\n  } = useCatalog;\n   useCatalog.uiStore.setPageSize(20)\n  useCatalog.uiStore.setSortBy(\"updatedAt-desc\")\n  const products = (catalogItems || []).map((item) => item.node.product);\n   const router = useRouter();\n  const { data, error, loading, fetchMore, networkStatus } = useQuery(\n    GET_PRODUCTS,\n    {\n      variables: {\n        type: type,\n        text: router.query.text,\n        category: router.query.category,\n        offset: 0,\n        limit: fetchLimit,\n      },\n      notifyOnNetworkStatusChange: true,\n    }\n  );\n    const loadingMore = networkStatus === NetworkStatus.fetchMore;\n   // Quick View Modal\n  const handleModalClose = () => {\n    const { pathname, query, asPath } = router;\n    const as = asPath;\n    router.push(\n      {\n        pathname,\n        query,\n      },\n      as,\n      {\n        shallow: true,\n      }\n    );\n    closeModal();\n  };\n   const handleQuickViewModal = (\n    modalProps: any,\n    deviceType: any,\n    onModalClose: any\n  ) => {\n    const { pathname, query } = router;\n    const as = `/product/${modalProps.slug}`;\n    if (pathname === '/product/[slug]') {\n      router.push(pathname, as);\n      return;\n    }\n    openModal({\n      show: true,\n      overlayClassName: 'quick-view-overlay',\n      closeOnClickOutside: false,\n      component: QuickView,\n      componentProps: { modalProps, deviceType, onModalClose },\n      closeComponent: 'div',\n      config: {\n        enableResizing: false,\n        disableDragging: true,\n        className: 'quick-view-modal',\n        width: 900,\n        y: 30,\n        height: 'auto',\n        transition: {\n          mass: 1,\n          tension: 0,\n          friction: 0,\n        },\n      },\n    });\n    router.push(\n      {\n        pathname,\n        query,\n      },\n      {\n        pathname: as,\n      },\n      {\n        shallow: true,\n      }\n    );\n  };\n  //if (error) return <ErrorMessage message={error.message} />;\n  if (loading && !loadingMore) {\n    return (\n      <LoaderWrapper>\n        <LoaderItem>\n          <Placeholder uniqueKey=\"1\" />\n        </LoaderItem>\n        <LoaderItem>\n          <Placeholder uniqueKey=\"2\" />\n        </LoaderItem>\n        <LoaderItem>\n          <Placeholder uniqueKey=\"3\" />\n        </LoaderItem>\n      </LoaderWrapper>\n    );\n  }\n   // if (!data || !data.products || data.products.items.length === 0) {\n  //   return <NoResultFound />;\n  // }\n  const handleLoadMore = () => {\n    fetchMore({\n      variables: {\n        offset: Number(data.products.items.length),\n        limit: fetchLimit,\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        if (!fetchMoreResult) {\n          return previousResult;\n        }\n        return {\n          products: {\n            __typename: previousResult.products.__typename,\n            items: [\n              ...previousResult.products.items,\n              ...fetchMoreResult.products.items,\n            ],\n            hasMore: fetchMoreResult.products.hasMore,\n          },\n        };\n      },\n    });\n  };\n   const renderCard = (productType, props) => {\n    switch (productType) {\n      case 'book':\n        return (\n          <BookCard\n            title={props.title}\n            image={props.image}\n            name={props?.author?.name}\n            data={props}\n            deviceType={deviceType}\n            onClick={() =>\n              router.push('/product/[slug]', `/product/${props.slug}`)\n            }\n          />\n        );\n      case 'medicine':\n        return (\n          <MedicineCard\n            title={props.title}\n            currency={CURRENCY}\n            image={props.image}\n            price={props.price}\n            weight={props.unit}\n            data={props}\n          />\n        );\n      case 'furniture':\n        return (\n          <FurnitureCard\n            title={props.title}\n            image={props.gallery[0].url}\n            discountInPercent={props.discountInPercent}\n            onClick={() =>\n              handleQuickViewModal(props, deviceType, handleModalClose)\n            }\n          />\n        );\n      default:\n        return (\n          <GeneralCard\n            title={props.title}\n            description={props.description}\n            image={props.primaryImage.URLs.medium}\n            weight={props.unit}\n            currency={props.pricing[0].currency.code}\n            price={props.pricing[0].displayPrice}\n            salePrice={23}\n            discountInPercent={2}\n            data={props}\n            deviceType={deviceType}\n            onClick={() =>\n              handleQuickViewModal(props, deviceType, handleModalClose)\n            }\n          />\n        );\n    }\n  };\n  return (\n    <>\n      <ProductsRow>\n        {products.map((item: any, index: number) => (\n          <ProductsCol\n            key={index}\n            style={type === 'book' ? { paddingLeft: 0, paddingRight: 1 } : {}}\n          >\n            <ProductCardWrapper>\n              <Fade\n                duration={800}\n                delay={index * 10}\n                style={{ height: '100%' }}\n              >\n                {renderCard(type, item)}\n              </Fade>\n            </ProductCardWrapper>\n          </ProductsCol>\n        ))}\n      </ProductsRow>\n         <ButtonWrapper>\n          <Button\n            onClick={handleLoadMore}\n            loading={loadingMore}\n            variant=\"secondary\"\n            style={{\n              fontSize: 14,\n            }}\n            border=\"1px solid #f1f1f1\"\n          >\n            <FormattedMessage id=\"loadMoreButton\" defaultMessage=\"Load More\" />\n          </Button>\n        </ButtonWrapper>\n    </>\n  );\n  };\n  */\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n};\n_c13 = Products;\nexport default Products; //\n// import Layout from \"components/Layout\";\n// import ProductGrid from \"components/ProductGrid\";\n//\n//\n// const productgrid = (useCatalog)=> {\n//\n//   const setPageSize = (pageSize) => {\n//     this.props.routingStore.setSearch({ limit: pageSize });\n//     this.props.uiStore.setPageSize(pageSize);\n//   };\n//\n//   const setSortBy = (sortBy) => {\n//     this.props.routingStore.setSearch({ sortby: sortBy });\n//     this.props.uiStore.setSortBy(sortBy);\n//   };\n//\n//\n//   const {\n//     catalogItems,\n//     catalogItemsPageInfo,\n//     isLoadingCatalogItems,\n//     routingStore: { query },\n//     shop,\n//     uiStore\n//   } = useCatalog;\n//\n//   const { routingStore } = this.props;\n//   routingStore.setTagId(null);\n//\n//\n//   const pageSize = query && inPageSizes(query.limit) ? parseInt(query.limit, 10) : uiStore.pageSize;\n//   const sortBy = query && query.sortby ? query.sortby : uiStore.sortBy;\n//\n//   //--console.log(catalogItems)\n//   let pageTitle;\n//   if (shop) {\n//     pageTitle = shop.name;\n//     if (shop.description) pageTitle = `${pageTitle} | ${shop.description}`;\n//   } else {\n//     pageTitle = \"Storefront\";\n//   }\n//\n//\n//\n//   return (\n//     <Layout shop={shop}>\n//       <ProductGrid\n//         catalogItems={catalogItems}\n//         currencyCode={(shop && shop.currency && shop.currency.code) || \"USD\"}\n//         isLoadingCatalogItems={isLoadingCatalogItems}\n//         pageInfo={catalogItemsPageInfo}\n//         pageSize={pageSize}\n//         setPageSize={setPageSize}\n//         setSortBy={setSortBy}\n//         sortBy={sortBy}\n//       />\n//     </Layout>\n//   );\n// }\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13;\n\n$RefreshReg$(_c, \"ErrorMessage$dynamic\");\n$RefreshReg$(_c2, \"ErrorMessage\");\n$RefreshReg$(_c3, \"QuickView$dynamic\");\n$RefreshReg$(_c4, \"QuickView\");\n$RefreshReg$(_c5, \"GeneralCard$dynamic\");\n$RefreshReg$(_c6, \"GeneralCard\");\n$RefreshReg$(_c7, \"BookCard$dynamic\");\n$RefreshReg$(_c8, \"BookCard\");\n$RefreshReg$(_c9, \"FurnitureCard$dynamic\");\n$RefreshReg$(_c10, \"FurnitureCard\");\n$RefreshReg$(_c11, \"MedicineCard$dynamic\");\n$RefreshReg$(_c12, \"MedicineCard\");\n$RefreshReg$(_c13, \"Products\");","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/src/components/product-grid/product-list/product-list.tsx"],"names":["React","dynamic","ErrorMessage","QuickView","GeneralCard","BookCard","FurnitureCard","MedicineCard","Products","deviceType","fetchLimit","loadMore","type"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,OAAP,MAAoB,cAApB;AA4BA,IAAMC,YAAY,GAAGD,OAAO,MAAC;AAAA,SAC3B,OAAO,wCAAP,CAD2B;AAAA,CAAD;AAAA;AAAA;AAAA,kCACnB,wCADmB;AAAA;AAAA,cACnB,wCADmB;AAAA;AAAA,EAA5B;MAAMC,Y;AAGN,IAAMC,SAAS,GAAGF,OAAO,OAAC;AAAA,SAAM,OAAO,gCAAP,CAAN;AAAA,CAAD;AAAA;AAAA;AAAA,kCAAc,gCAAd;AAAA;AAAA,cAAc,gCAAd;AAAA;AAAA,EAAzB;MAAME,S;AACN,IAAMC,WAAW,GAAGH,OAAO;AAAA,SACzB,OAAO,2DAAP,CADyB;AAAA;AAAA;AAAA;AAAA,kCAClB,2DADkB;AAAA;AAAA,cAClB,2DADkB;AAAA;AAAA,EAA3B;MAAMG,W;AAGN,IAAMC,QAAQ,GAAGJ,OAAO;AAAA,SACtB,OAAO,2DAAP,CADsB;AAAA;AAAA;AAAA;AAAA,kCACf,2DADe;AAAA;AAAA,cACf,2DADe;AAAA;AAAA,EAAxB;MAAMI,Q;AAGN,IAAMC,aAAa,GAAGL,OAAO;AAAA,SAC3B,OAAO,+DAAP,CAD2B;AAAA;AAAA;AAAA;AAAA,kCACpB,+DADoB;AAAA;AAAA,cACpB,+DADoB;AAAA;AAAA,EAA7B;OAAMK,a;AAGN,IAAMC,YAAY,GAAGN,OAAO;AAAA,SAC1B,OAAO,6DAAP,CAD0B;AAAA;AAAA;AAAA;AAAA,kCACnB,6DADmB;AAAA;AAAA,cACnB,6DADmB;AAAA;AAAA,EAA5B;OAAMM,Y;AAeN,OAAO,IAAMC,QAAiC,GAAG,SAApCA,QAAoC,OAK3C;AAAA,MAJJC,UAII,QAJJA,UAII;AAAA,6BAHJC,UAGI;AAAA,MAHJA,UAGI,gCAHS,EAGT;AAAA,2BAFJC,QAEI;AAAA,MAFJA,QAEI,8BAFO,IAEP;AAAA,MADJC,IACI,QADJA,IACI;;AACJ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYE,sBAAO,yCAAP;AACD,CApPM;OAAMJ,Q;AAsPb,eAAeA,QAAf,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport { useRouter } from 'next/router';\nimport dynamic from 'next/dynamic';\nimport { openModal, closeModal } from '@redq/reuse-modal';\nimport {\n  ProductsRow,\n  ProductsCol,\n  ButtonWrapper,\n  LoaderWrapper,\n  LoaderItem,\n  ProductCardWrapper,\n} from './product-list.style';\nimport { CURRENCY } from 'utils/constant';\nimport { useQuery } from '@apollo/react-hooks';\nimport { NetworkStatus } from 'apollo-client';\nimport Placeholder from 'components/placeholder/placeholder';\nimport Fade from 'react-reveal/Fade';\nimport NoResultFound from 'components/no-result/no-result';\nimport { FormattedMessage } from 'react-intl';\nimport { Button } from 'components/button/button';\nimport { GET_PRODUCTS } from 'graphql/query/products.query';\nimport withCatalogItems from \"containers/catalog/withCatalogItems\";\nimport PageSizeSelector from \"components/PageSizeSelector\";\nimport SortBySelector from \"components/SortBySelector\";\nimport { inPageSizes } from \"lib/utils/pageSizes\";\n\nimport {withApollo} from \"lib/apollo/withApollo\";\nimport inject from \"hocs/inject\";\n\n\nconst ErrorMessage = dynamic(() =>\n  import('components/error-message/error-message')\n);\nconst QuickView = dynamic(() => import('features/quick-view/quick-view'));\nconst GeneralCard = dynamic(\n  import('components/product-card/product-card-one/product-card-one')\n);\nconst BookCard = dynamic(\n  import('components/product-card/product-card-two/product-card-two')\n);\nconst FurnitureCard = dynamic(\n  import('components/product-card/product-card-three/product-card-three')\n);\nconst MedicineCard = dynamic(\n  import('components/product-card/product-card-five/product-card-five')\n);\n\ntype ProductsProps = {\n  deviceType?: {\n    mobile: boolean;\n    tablet: boolean;\n    desktop: boolean;\n  };\n  fetchLimit?: number;\n  loadMore?: boolean;\n  type?: string;\n};\n\nexport const Products: React.FC<ProductsProps> = ({\n  deviceType,\n  fetchLimit = 20,\n  loadMore = true,\n  type\n}) => {\n  /*\n  //--console.log(useCatalog)\n  //--console.log(\"Pulkitt\")\n\n\n  const {\n    catalogItems,\n    catalogItemsPageInfo,\n    isLoadingCatalogItems,\n    routingStore: { query },\n    shop,\n    uiStore\n  } = useCatalog;\n\n  useCatalog.uiStore.setPageSize(20)\n  useCatalog.uiStore.setSortBy(\"updatedAt-desc\")\n  const products = (catalogItems || []).map((item) => item.node.product);\n\n  const router = useRouter();\n  const { data, error, loading, fetchMore, networkStatus } = useQuery(\n    GET_PRODUCTS,\n    {\n      variables: {\n        type: type,\n        text: router.query.text,\n        category: router.query.category,\n        offset: 0,\n        limit: fetchLimit,\n      },\n      notifyOnNetworkStatusChange: true,\n    }\n  );\n\n\n  const loadingMore = networkStatus === NetworkStatus.fetchMore;\n\n  // Quick View Modal\n  const handleModalClose = () => {\n    const { pathname, query, asPath } = router;\n    const as = asPath;\n    router.push(\n      {\n        pathname,\n        query,\n      },\n      as,\n      {\n        shallow: true,\n      }\n    );\n    closeModal();\n  };\n\n  const handleQuickViewModal = (\n    modalProps: any,\n    deviceType: any,\n    onModalClose: any\n  ) => {\n    const { pathname, query } = router;\n    const as = `/product/${modalProps.slug}`;\n    if (pathname === '/product/[slug]') {\n      router.push(pathname, as);\n      return;\n    }\n    openModal({\n      show: true,\n      overlayClassName: 'quick-view-overlay',\n      closeOnClickOutside: false,\n      component: QuickView,\n      componentProps: { modalProps, deviceType, onModalClose },\n      closeComponent: 'div',\n      config: {\n        enableResizing: false,\n        disableDragging: true,\n        className: 'quick-view-modal',\n        width: 900,\n        y: 30,\n        height: 'auto',\n        transition: {\n          mass: 1,\n          tension: 0,\n          friction: 0,\n        },\n      },\n    });\n    router.push(\n      {\n        pathname,\n        query,\n      },\n      {\n        pathname: as,\n      },\n      {\n        shallow: true,\n      }\n    );\n  };\n  //if (error) return <ErrorMessage message={error.message} />;\n  if (loading && !loadingMore) {\n    return (\n      <LoaderWrapper>\n        <LoaderItem>\n          <Placeholder uniqueKey=\"1\" />\n        </LoaderItem>\n        <LoaderItem>\n          <Placeholder uniqueKey=\"2\" />\n        </LoaderItem>\n        <LoaderItem>\n          <Placeholder uniqueKey=\"3\" />\n        </LoaderItem>\n      </LoaderWrapper>\n    );\n  }\n\n  // if (!data || !data.products || data.products.items.length === 0) {\n  //   return <NoResultFound />;\n  // }\n  const handleLoadMore = () => {\n    fetchMore({\n      variables: {\n        offset: Number(data.products.items.length),\n        limit: fetchLimit,\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        if (!fetchMoreResult) {\n          return previousResult;\n        }\n        return {\n          products: {\n            __typename: previousResult.products.__typename,\n            items: [\n              ...previousResult.products.items,\n              ...fetchMoreResult.products.items,\n            ],\n            hasMore: fetchMoreResult.products.hasMore,\n          },\n        };\n      },\n    });\n  };\n\n  const renderCard = (productType, props) => {\n    switch (productType) {\n      case 'book':\n        return (\n          <BookCard\n            title={props.title}\n            image={props.image}\n            name={props?.author?.name}\n            data={props}\n            deviceType={deviceType}\n            onClick={() =>\n              router.push('/product/[slug]', `/product/${props.slug}`)\n            }\n          />\n        );\n      case 'medicine':\n        return (\n          <MedicineCard\n            title={props.title}\n            currency={CURRENCY}\n            image={props.image}\n            price={props.price}\n            weight={props.unit}\n            data={props}\n          />\n        );\n      case 'furniture':\n        return (\n          <FurnitureCard\n            title={props.title}\n            image={props.gallery[0].url}\n            discountInPercent={props.discountInPercent}\n            onClick={() =>\n              handleQuickViewModal(props, deviceType, handleModalClose)\n            }\n          />\n        );\n      default:\n        return (\n          <GeneralCard\n            title={props.title}\n            description={props.description}\n            image={props.primaryImage.URLs.medium}\n            weight={props.unit}\n            currency={props.pricing[0].currency.code}\n            price={props.pricing[0].displayPrice}\n            salePrice={23}\n            discountInPercent={2}\n            data={props}\n            deviceType={deviceType}\n            onClick={() =>\n              handleQuickViewModal(props, deviceType, handleModalClose)\n            }\n          />\n        );\n    }\n  };\n  return (\n    <>\n      <ProductsRow>\n        {products.map((item: any, index: number) => (\n          <ProductsCol\n            key={index}\n            style={type === 'book' ? { paddingLeft: 0, paddingRight: 1 } : {}}\n          >\n            <ProductCardWrapper>\n              <Fade\n                duration={800}\n                delay={index * 10}\n                style={{ height: '100%' }}\n              >\n                {renderCard(type, item)}\n              </Fade>\n            </ProductCardWrapper>\n          </ProductsCol>\n        ))}\n      </ProductsRow>\n\n        <ButtonWrapper>\n          <Button\n            onClick={handleLoadMore}\n            loading={loadingMore}\n            variant=\"secondary\"\n            style={{\n              fontSize: 14,\n            }}\n            border=\"1px solid #f1f1f1\"\n          >\n            <FormattedMessage id=\"loadMoreButton\" defaultMessage=\"Load More\" />\n          </Button>\n        </ButtonWrapper>\n    </>\n  );\n};\n*/\n  return <></>\n}\n\nexport default Products;\n\n\n\n//\n// import Layout from \"components/Layout\";\n// import ProductGrid from \"components/ProductGrid\";\n//\n//\n// const productgrid = (useCatalog)=> {\n//\n//   const setPageSize = (pageSize) => {\n//     this.props.routingStore.setSearch({ limit: pageSize });\n//     this.props.uiStore.setPageSize(pageSize);\n//   };\n//\n//   const setSortBy = (sortBy) => {\n//     this.props.routingStore.setSearch({ sortby: sortBy });\n//     this.props.uiStore.setSortBy(sortBy);\n//   };\n//\n//\n//   const {\n//     catalogItems,\n//     catalogItemsPageInfo,\n//     isLoadingCatalogItems,\n//     routingStore: { query },\n//     shop,\n//     uiStore\n//   } = useCatalog;\n//\n//   const { routingStore } = this.props;\n//   routingStore.setTagId(null);\n//\n//\n//   const pageSize = query && inPageSizes(query.limit) ? parseInt(query.limit, 10) : uiStore.pageSize;\n//   const sortBy = query && query.sortby ? query.sortby : uiStore.sortBy;\n//\n//   //--console.log(catalogItems)\n//   let pageTitle;\n//   if (shop) {\n//     pageTitle = shop.name;\n//     if (shop.description) pageTitle = `${pageTitle} | ${shop.description}`;\n//   } else {\n//     pageTitle = \"Storefront\";\n//   }\n//\n//\n//\n//   return (\n//     <Layout shop={shop}>\n//       <ProductGrid\n//         catalogItems={catalogItems}\n//         currencyCode={(shop && shop.currency && shop.currency.code) || \"USD\"}\n//         isLoadingCatalogItems={isLoadingCatalogItems}\n//         pageInfo={catalogItemsPageInfo}\n//         pageSize={pageSize}\n//         setPageSize={setPageSize}\n//         setSortBy={setSortBy}\n//         sortBy={sortBy}\n//       />\n//     </Layout>\n//   );\n// }\n\n\n"]},"metadata":{},"sourceType":"module"}