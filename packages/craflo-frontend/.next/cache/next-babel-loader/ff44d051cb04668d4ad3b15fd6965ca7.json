{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/usr/local/src/app/packages/craflo-frontend/src/reaction/lib/apollo/withApollo.tsx\";\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { ApolloProvider } from \"@apollo/react-components\";\nimport { ApolloProvider as NewApolloProvider } from \"@apollo/client\";\nimport createApolloClient from \"./apolloClient\"; // On the client we store the apollo client in the following variable\n// this prevents the client from reinitializing between page transitions.\n\nvar globalApolloClient = null;\n\nvar initApolloClient = function initApolloClient() {\n  // Reuse client on the client-side\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient();\n  }\n\n  return globalApolloClient;\n};\n\nexport var withApollo = function withApollo() {\n  return function (PageComponent) {\n    var WithApollo = function WithApollo(_ref) {\n      var pageProps = _extends({}, _ref);\n\n      var client = initApolloClient();\n      return /*#__PURE__*/React.createElement(ApolloProvider, {\n        client: client,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(NewApolloProvider, {\n        client: client,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(PageComponent, _extends({}, pageProps, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }\n      }))));\n    }; // Set the correct displayName in development\n\n\n    if (true) {\n      var displayName = PageComponent.displayName || PageComponent.name || \"Component\";\n      WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n    }\n\n    return WithApollo;\n  };\n};","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/src/reaction/lib/apollo/withApollo.tsx"],"names":["React","ApolloProvider","NewApolloProvider","createApolloClient","globalApolloClient","initApolloClient","withApollo","PageComponent","WithApollo","pageProps","client","displayName","name"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASA,cAAc,IAAIC,iBAA3B,QAAoD,gBAApD;AACA,OAAOC,kBAAP,MAA+B,gBAA/B,C,CAEA;AACA;;AACA,IAAIC,kBAAkB,GAAG,IAAzB;;AAGA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B;AACA,MAAI,CAACD,kBAAL,EAAyB;AACvBA,IAAAA,kBAAkB,GAAGD,kBAAkB,EAAvC;AACD;;AAED,SAAOC,kBAAP;AACD,CAPD;;AASA,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAACC,aAAD,EAAmB;AACjD,QAAMC,UAAU,GAAG,SAAbA,UAAa,OAAsB;AAAA,UAAhBC,SAAgB;;AACvC,UAAMC,MAAM,GAAGL,gBAAgB,EAA/B;AAEA,0BACE,oBAAC,cAAD;AAAgB,QAAA,MAAM,EAAEK,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,iBAAD;AAAmB,QAAA,MAAM,EAAEA,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,aAAD,eAAmBD,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,CADF,CADF;AAOD,KAVD,CADiD,CAajD;;;AACA,cAA2C;AACzC,UAAME,WAAW,GAAGJ,aAAa,CAACI,WAAd,IAA6BJ,aAAa,CAACK,IAA3C,IAAmD,WAAvE;AACAJ,MAAAA,UAAU,CAACG,WAAX,wBAAuCA,WAAvC;AACD;;AAED,WAAOH,UAAP;AACD,GApByB;AAAA,CAAnB","sourcesContent":["import React from \"react\";\nimport { ApolloProvider } from \"@apollo/react-components\";\nimport { ApolloProvider as NewApolloProvider } from \"@apollo/client\";\nimport createApolloClient from \"./apolloClient\";\n\n// On the client we store the apollo client in the following variable\n// this prevents the client from reinitializing between page transitions.\nlet globalApolloClient = null;\n\n\nconst initApolloClient = () => {\n  // Reuse client on the client-side\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient();\n  }\n\n  return globalApolloClient;\n};\n\nexport const withApollo = () => (PageComponent) => {\n  const WithApollo = ({ ...pageProps }) => {\n    const client = initApolloClient();\n\n    return (\n      <ApolloProvider client={client}>\n        <NewApolloProvider client={client}>\n          <PageComponent {...pageProps} />\n        </NewApolloProvider>\n      </ApolloProvider>\n    );\n  };\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== \"production\") {\n    const displayName = PageComponent.displayName || PageComponent.name || \"Component\";\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  return WithApollo;\n};\n"]},"metadata":{},"sourceType":"module"}