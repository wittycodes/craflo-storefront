{"ast":null,"code":"import Router from \"next/router\";\nvar ignorePaths = [\"/signin\", \"/signin\", \"/refresh\"];\n\nvar replace = function replace(href, as) {\n  if (!true) {\n    // eslint-disable-next-line\n    console.warn(\"You should only use i18nRouter inside the client side of your app.\");\n    return null;\n  }\n\n  var locale = location.pathname.split(\"/\")[1];\n\n  if (href === \"/\") {\n    return Router.replace(\"/[lang]\", \"/\".concat(locale));\n  }\n\n  if (ignorePaths.includes(href)) {\n    return Router.replace(href);\n  }\n\n  if (!as) {\n    return Router.replace(\"/[lang]\".concat(href), \"/\".concat(locale).concat(href));\n  }\n\n  Router.replace(\"/[lang]\".concat(href), \"/\".concat(locale).concat(as));\n  return null;\n};\n\nvar push = function push(href, as) {\n  if (!true) {\n    // eslint-disable-next-line no-console\n    console.warn(\"You should only use i18nRouter inside the client side of your app.\");\n    return null;\n  }\n\n  var locale = location.pathname.split(\"/\")[1];\n\n  if (href === \"/\") {\n    return Router.push(\"/[lang]\", \"/\".concat(locale));\n  }\n\n  if (ignorePaths.includes(href)) {\n    return Router.push(href);\n  }\n\n  if (!as) {\n    return Router.push(\"/[lang]\".concat(href), \"/\".concat(locale).concat(href));\n  }\n\n  Router.push(\"/[lang]\".concat(href), \"/\".concat(locale).concat(as));\n  return null;\n};\n\nexport default {\n  replace: replace,\n  push: push,\n  back: function back() {\n    return Router.back();\n  }\n};","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/src/reaction/translations/i18nRouter.tsx"],"names":["Router","ignorePaths","replace","href","as","console","warn","locale","location","pathname","split","includes","push","back"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AAEA,IAAMC,WAAW,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,UAAvB,CAApB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAOC,EAAP,EAAc;AAC5B,MAAI,KAAJ,EAAsB;AACpB;AACAC,IAAAA,OAAO,CAACC,IAAR,CAAa,oEAAb;AACA,WAAO,IAAP;AACD;;AAED,MAAMC,MAAM,GAAGC,QAAQ,CAACC,QAAT,CAAkBC,KAAlB,CAAwB,GAAxB,EAA6B,CAA7B,CAAf;;AAEA,MAAIP,IAAI,KAAK,GAAb,EAAkB;AAChB,WAAOH,MAAM,CAACE,OAAP,CAAe,SAAf,aAA8BK,MAA9B,EAAP;AACD;;AAED,MAAIN,WAAW,CAACU,QAAZ,CAAqBR,IAArB,CAAJ,EAAgC;AAC9B,WAAOH,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAP;AACD;;AAED,MAAI,CAACC,EAAL,EAAS;AACP,WAAOJ,MAAM,CAACE,OAAP,kBAAyBC,IAAzB,cAAqCI,MAArC,SAA8CJ,IAA9C,EAAP;AACD;;AAEDH,EAAAA,MAAM,CAACE,OAAP,kBAAyBC,IAAzB,cAAqCI,MAArC,SAA8CH,EAA9C;AAEA,SAAO,IAAP;AACD,CAxBD;;AA0BA,IAAMQ,IAAI,GAAG,SAAPA,IAAO,CAACT,IAAD,EAAOC,EAAP,EAAc;AACzB,MAAI,KAAJ,EAAsB;AACpB;AACAC,IAAAA,OAAO,CAACC,IAAR,CAAa,oEAAb;AACA,WAAO,IAAP;AACD;;AAED,MAAMC,MAAM,GAAGC,QAAQ,CAACC,QAAT,CAAkBC,KAAlB,CAAwB,GAAxB,EAA6B,CAA7B,CAAf;;AAEA,MAAIP,IAAI,KAAK,GAAb,EAAkB;AAChB,WAAOH,MAAM,CAACY,IAAP,CAAY,SAAZ,aAA2BL,MAA3B,EAAP;AACD;;AAED,MAAIN,WAAW,CAACU,QAAZ,CAAqBR,IAArB,CAAJ,EAAgC;AAC9B,WAAOH,MAAM,CAACY,IAAP,CAAYT,IAAZ,CAAP;AACD;;AAED,MAAI,CAACC,EAAL,EAAS;AACP,WAAOJ,MAAM,CAACY,IAAP,kBAAsBT,IAAtB,cAAkCI,MAAlC,SAA2CJ,IAA3C,EAAP;AACD;;AAEDH,EAAAA,MAAM,CAACY,IAAP,kBAAsBT,IAAtB,cAAkCI,MAAlC,SAA2CH,EAA3C;AAEA,SAAO,IAAP;AACD,CAxBD;;AA0BA,eAAe;AACbF,EAAAA,OAAO,EAAPA,OADa;AAEbU,EAAAA,IAAI,EAAJA,IAFa;AAGbC,EAAAA,IAAI,EAAE;AAAA,WAAMb,MAAM,CAACa,IAAP,EAAN;AAAA;AAHO,CAAf","sourcesContent":["import Router from \"next/router\";\n\nconst ignorePaths = [\"/signin\", \"/signin\", \"/refresh\"];\n\nconst replace = (href, as) => {\n  if (!process.browser) {\n    // eslint-disable-next-line\n    console.warn(\"You should only use i18nRouter inside the client side of your app.\");\n    return null;\n  }\n\n  const locale = location.pathname.split(\"/\")[1];\n\n  if (href === \"/\") {\n    return Router.replace(\"/[lang]\", `/${locale}`);\n  }\n\n  if (ignorePaths.includes(href)) {\n    return Router.replace(href);\n  }\n\n  if (!as) {\n    return Router.replace(`/[lang]${href}`, `/${locale}${href}`);\n  }\n\n  Router.replace(`/[lang]${href}`, `/${locale}${as}`);\n\n  return null;\n};\n\nconst push = (href, as) => {\n  if (!process.browser) {\n    // eslint-disable-next-line no-console\n    console.warn(\"You should only use i18nRouter inside the client side of your app.\");\n    return null;\n  }\n\n  const locale = location.pathname.split(\"/\")[1];\n\n  if (href === \"/\") {\n    return Router.push(\"/[lang]\", `/${locale}`);\n  }\n\n  if (ignorePaths.includes(href)) {\n    return Router.push(href);\n  }\n\n  if (!as) {\n    return Router.push(`/[lang]${href}`, `/${locale}${href}`);\n  }\n\n  Router.push(`/[lang]${href}`, `/${locale}${as}`);\n\n  return null;\n};\n\nexport default {\n  replace,\n  push,\n  back: () => Router.back()\n};\n"]},"metadata":{},"sourceType":"module"}