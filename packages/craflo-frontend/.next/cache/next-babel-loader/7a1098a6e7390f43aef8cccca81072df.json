{"ast":null,"code":"import { useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport useStores from \"hooks/useStores\";\nimport miniProfileQuery from \"./miniProfile.gql\";\n/**\n * Gets current viewer's data\n *\n * @returns {Array} the viewer's data\n */\n\nexport default function useMiniProfile() {\n  const {\n    authStore\n  } = useStores();\n  const {\n    accessToken\n  } = authStore;\n  const {\n    loading,\n    data,\n    refetch\n  } = useQuery(miniProfileQuery, {\n    skip: !accessToken\n  });\n  const viewer = data && data.viewer;\n  useEffect(() => {\n    if (!viewer && accessToken) {\n      refetch();\n    }\n  }, [accessToken, viewer]);\n  return {\n    miniProfile: data === null || data === void 0 ? void 0 : data.viewer,\n    loading,\n    refetch\n  };\n}","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/src/reaction/hooks/viewer/useMiniProfile.tsx"],"names":["useEffect","useQuery","useStores","miniProfileQuery","useMiniProfile","authStore","accessToken","loading","data","refetch","skip","viewer","miniProfile"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,gBAAP,MAA6B,mBAA7B;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,cAAT,GAA0B;AACvC,QAAM;AAAEC,IAAAA;AAAF,MAAgBH,SAAS,EAA/B;AACA,QAAM;AAACI,IAAAA;AAAD,MAAiBD,SAAvB;AAEA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA;AAAjB,MAA6BR,QAAQ,CAACE,gBAAD,EAAmB;AAC5DO,IAAAA,IAAI,EAAE,CAACJ;AADqD,GAAnB,CAA3C;AAIA,QAAMK,MAAM,GAAGH,IAAI,IAAIA,IAAI,CAACG,MAA5B;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACW,MAAD,IAAWL,WAAf,EAA4B;AAC1BG,MAAAA,OAAO;AACR;AACF,GAJQ,EAIN,CAACH,WAAD,EAAcK,MAAd,CAJM,CAAT;AAMA,SAAO;AACLC,IAAAA,WAAW,EAAEJ,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEG,MADd;AAELJ,IAAAA,OAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD","sourcesContent":["import { useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport useStores from \"hooks/useStores\";\nimport miniProfileQuery from \"./miniProfile.gql\";\n\n/**\n * Gets current viewer's data\n *\n * @returns {Array} the viewer's data\n */\nexport default function useMiniProfile() {\n  const { authStore } = useStores();\n  const {accessToken } = authStore;\n\n  const { loading, data, refetch } = useQuery(miniProfileQuery, {\n    skip: !accessToken\n  });\n\n  const viewer = data && data.viewer;\n\n  useEffect(() => {\n    if (!viewer && accessToken) {\n      refetch();\n    }\n  }, [accessToken, viewer]);\n\n  return {\n    miniProfile: data?.viewer,\n    loading,\n    refetch\n  };\n}\n"]},"metadata":{},"sourceType":"module"}