{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/usr/local/src/app/packages/craflo-frontend/src/reaction/context/AuthContext.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createContext, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport fetch from \"isomorphic-unfetch\";\nimport useSWR from \"swr\";\nimport { setAccessToken as setApolloToken } from \"lib/apollo/apolloClient\";\n\nvar fetcher = function fetcher(url) {\n  return fetch(url).then(function (response) {\n    return response.json();\n  });\n};\n/**\n * Splits the user's full name into first and last name\n *\n * @param {Object} account - the users account\n * @returns {Object} users first and last name as object properties\n */\n\n\nfunction splitNames(account) {\n  var firstName = \"\";\n  var lastName = \"\";\n  var name = account.name;\n  var nameParts = name && name.split(\" \");\n\n  if (Array.isArray(nameParts)) {\n    var _nameParts = _slicedToArray(nameParts, 2);\n\n    firstName = _nameParts[0];\n    lastName = _nameParts[1];\n  }\n\n  return {\n    firstName: firstName,\n    lastName: lastName\n  };\n}\n\nexport var AuthContext = /*#__PURE__*/createContext({});\nexport var AuthProvider = function AuthProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(null),\n      accountId = _useState[0],\n      setAccountId = _useState[1];\n\n  var _useState2 = useState(null),\n      accessToken = _useState2[0],\n      setAccessToken = _useState2[1];\n\n  var _useState3 = useState({}),\n      account = _useState3[0],\n      _setAccount = _useState3[1];\n\n  var _useSWR = useSWR(\"/api/account/token\", fetcher),\n      tokenData = _useSWR.data;\n\n  useEffect(function () {\n    var fetchedToken = tokenData && tokenData.accessToken;\n\n    if (fetchedToken) {\n      setAccessToken(fetchedToken);\n      setApolloToken(fetchedToken);\n    }\n  }, [tokenData]);\n\n  var setAccount = function setAccount(newAccount) {\n    if (newAccount) {\n      setAccountId(newAccount._id) || null;\n\n      _setAccount(_objectSpread(_objectSpread({}, splitNames(newAccount)), newAccount));\n    } else {\n      setAccountId(null);\n\n      _setAccount({});\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      accountId: accountId,\n      account: account,\n      accessToken: accessToken,\n      setAccount: setAccount,\n      setAccessToken: setAccessToken,\n      isAuthenticated: !!accountId\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    },\n    __self: _this\n  }, children);\n};\n\n_s(AuthProvider, \"rC7hk5OeBXu3HX9vYqR+0K+Lje0=\", false, function () {\n  return [useSWR];\n});\n\n_c = AuthProvider;\nAuthProvider.propTypes = {\n  children: PropTypes.node\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/src/reaction/context/AuthContext.tsx"],"names":["createContext","useState","useEffect","PropTypes","fetch","useSWR","setAccessToken","setApolloToken","fetcher","url","then","response","json","splitNames","account","firstName","lastName","name","nameParts","split","Array","isArray","AuthContext","AuthProvider","children","accountId","setAccountId","accessToken","_setAccount","tokenData","data","fetchedToken","setAccount","newAccount","_id","isAuthenticated","propTypes","node"],"mappings":";;;;;;;;;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAASC,cAAc,IAAIC,cAA3B,QAAiD,yBAAjD;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD;AAAA,SAASL,KAAK,CAACK,GAAD,CAAL,CAAWC,IAAX,CAAgB,UAACC,QAAD;AAAA,WAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,GAAhB,CAAT;AAAA,CAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAC3B,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,QAAQ,GAAG,EAAf;AAF2B,MAGnBC,IAHmB,GAGVH,OAHU,CAGnBG,IAHmB;AAI3B,MAAMC,SAAS,GAAGD,IAAI,IAAIA,IAAI,CAACE,KAAL,CAAW,GAAX,CAA1B;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcH,SAAd,CAAJ,EAA8B;AAAA,oCACJA,SADI;;AAC3BH,IAAAA,SAD2B;AAChBC,IAAAA,QADgB;AAE7B;;AAED,SAAO;AACLD,IAAAA,SAAS,EAATA,SADK;AAELC,IAAAA,QAAQ,EAARA;AAFK,GAAP;AAID;;AAED,OAAO,IAAMM,WAAW,gBAAGtB,aAAa,CAAC,EAAD,CAAjC;AAEP,OAAO,IAAMuB,YAAY,GAAG,SAAfA,YAAe,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBACVvB,QAAQ,CAAC,IAAD,CADE;AAAA,MACrCwB,SADqC;AAAA,MAC1BC,YAD0B;;AAAA,mBAENzB,QAAQ,CAAC,IAAD,CAFF;AAAA,MAErC0B,WAFqC;AAAA,MAExBrB,cAFwB;;AAAA,mBAGbL,QAAQ,CAAC,EAAD,CAHK;AAAA,MAGrCa,OAHqC;AAAA,MAG5Bc,WAH4B;;AAAA,gBAKhBvB,MAAM,CAAC,oBAAD,EAAuBG,OAAvB,CALU;AAAA,MAK9BqB,SAL8B,WAKpCC,IALoC;;AAO5C5B,EAAAA,SAAS,CAAC,YAAM;AACd,QAAM6B,YAAY,GAAGF,SAAS,IAAIA,SAAS,CAACF,WAA5C;;AACA,QAAII,YAAJ,EAAkB;AAChBzB,MAAAA,cAAc,CAACyB,YAAD,CAAd;AACAxB,MAAAA,cAAc,CAACwB,YAAD,CAAd;AACD;AACF,GANQ,EAMN,CAACF,SAAD,CANM,CAAT;;AAQA,MAAMG,UAAU,GAAG,SAAbA,UAAa,CAACC,UAAD,EAAgB;AACjC,QAAIA,UAAJ,EAAgB;AACdP,MAAAA,YAAY,CAACO,UAAU,CAACC,GAAZ,CAAZ,IAAgC,IAAhC;;AACAN,MAAAA,WAAW,iCAAMf,UAAU,CAACoB,UAAD,CAAhB,GAAiCA,UAAjC,EAAX;AACD,KAHD,MAGO;AACLP,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACAE,MAAAA,WAAW,CAAC,EAAD,CAAX;AACD;AACF,GARD;;AAUA,sBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAC3BH,MAAAA,SAAS,EAATA,SAD2B;AAE3BX,MAAAA,OAAO,EAAPA,OAF2B;AAG3Ba,MAAAA,WAAW,EAAXA,WAH2B;AAI3BK,MAAAA,UAAU,EAAVA,UAJ2B;AAK3B1B,MAAAA,cAAc,EAAdA,cAL2B;AAM3B6B,MAAAA,eAAe,EAAE,CAAC,CAACV;AANQ,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGD,QATH,CADF;AAaD,CAtCM;;GAAMD,Y;UAKiBlB,M;;;KALjBkB,Y;AAwCbA,YAAY,CAACa,SAAb,GAAyB;AACvBZ,EAAAA,QAAQ,EAAErB,SAAS,CAACkC;AADG,CAAzB","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport fetch from \"isomorphic-unfetch\";\nimport useSWR from \"swr\";\nimport { setAccessToken as setApolloToken } from \"lib/apollo/apolloClient\";\n\nconst fetcher = (url) => fetch(url).then((response) => response.json());\n\n/**\n * Splits the user's full name into first and last name\n *\n * @param {Object} account - the users account\n * @returns {Object} users first and last name as object properties\n */\nfunction splitNames(account) {\n  let firstName = \"\";\n  let lastName = \"\";\n  const { name } = account;\n  const nameParts = name && name.split(\" \");\n  if (Array.isArray(nameParts)) {\n    [firstName, lastName] = nameParts;\n  }\n\n  return {\n    firstName,\n    lastName\n  };\n}\n\nexport const AuthContext = createContext({} as any);\n\nexport const AuthProvider = ({ children }) => {\n  const [accountId, setAccountId] = useState(null);\n  const [accessToken, setAccessToken] = useState(null);\n  const [account, _setAccount] = useState({});\n\n  const { data: tokenData } = useSWR(\"/api/account/token\", fetcher);\n\n  useEffect(() => {\n    const fetchedToken = tokenData && tokenData.accessToken;\n    if (fetchedToken) {\n      setAccessToken(fetchedToken);\n      setApolloToken(fetchedToken);\n    }\n  }, [tokenData]);\n\n  const setAccount = (newAccount) => {\n    if (newAccount) {\n      setAccountId(newAccount._id) || null;\n      _setAccount({ ...splitNames(newAccount), ...newAccount });\n    } else {\n      setAccountId(null);\n      _setAccount({});\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{\n      accountId,\n      account,\n      accessToken,\n      setAccount,\n      setAccessToken,\n      isAuthenticated: !!accountId\n    }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nAuthProvider.propTypes = {\n  children: PropTypes.node\n};\n"]},"metadata":{},"sourceType":"module"}