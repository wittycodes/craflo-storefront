{"ast":null,"code":"import { useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport useStores from \"hooks/useStores\";\nimport viewerQuery from \"./viewer.gql\";\n/**\n * Gets current viewer's data\n *\n * @returns {Array} the viewer's data\n */\n\nexport default function useViewer() {\n  const {\n    authStore\n  } = useStores();\n  const {\n    account,\n    setAccount,\n    accessToken\n  } = authStore;\n  const {\n    loading,\n    data,\n    refetch\n  } = useQuery(viewerQuery, {\n    skip: !accessToken\n  });\n  const viewer = data && data.viewer;\n  useEffect(() => {\n    if (!viewer && accessToken) {\n      refetch();\n    }\n  }, [accessToken, viewer]);\n  useEffect(() => {\n    if (viewer) setAccount(viewer);\n  }, [viewer]);\n  return [account, loading, refetch];\n}","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/src/reaction/hooks/viewer/useViewer.tsx"],"names":["useEffect","useQuery","useStores","viewerQuery","useViewer","authStore","account","setAccount","accessToken","loading","data","refetch","skip","viewer"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,SAAT,GAAqB;AAClC,QAAM;AAAEC,IAAAA;AAAF,MAAgBH,SAAS,EAA/B;AACA,QAAM;AAAEI,IAAAA,OAAF;AAAWC,IAAAA,UAAX;AAAuBC,IAAAA;AAAvB,MAAuCH,SAA7C;AAEA,QAAM;AAAEI,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA;AAAjB,MAA6BV,QAAQ,CAACE,WAAD,EAAc;AACvDS,IAAAA,IAAI,EAAE,CAACJ;AADgD,GAAd,CAA3C;AAIA,QAAMK,MAAM,GAAGH,IAAI,IAAIA,IAAI,CAACG,MAA5B;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACa,MAAD,IAAWL,WAAf,EAA4B;AAC1BG,MAAAA,OAAO;AACR;AACF,GAJQ,EAIN,CAACH,WAAD,EAAcK,MAAd,CAJM,CAAT;AAMAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,MAAJ,EAAYN,UAAU,CAACM,MAAD,CAAV;AACb,GAFQ,EAEN,CAACA,MAAD,CAFM,CAAT;AAIA,SAAO,CACLP,OADK,EAELG,OAFK,EAGLE,OAHK,CAAP;AAKD","sourcesContent":["import { useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport useStores from \"hooks/useStores\";\nimport viewerQuery from \"./viewer.gql\";\n\n/**\n * Gets current viewer's data\n *\n * @returns {Array} the viewer's data\n */\nexport default function useViewer() {\n  const { authStore } = useStores();\n  const { account, setAccount, accessToken } = authStore;\n\n  const { loading, data, refetch } = useQuery(viewerQuery, {\n    skip: !accessToken\n  });\n\n  const viewer = data && data.viewer;\n\n  useEffect(() => {\n    if (!viewer && accessToken) {\n      refetch();\n    }\n  }, [accessToken, viewer]);\n\n  useEffect(() => {\n    if (viewer) setAccount(viewer);\n  }, [viewer]);\n\n  return [\n    account,\n    loading,\n    refetch\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}