{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/usr/local/src/app/packages/craflo-frontend/src/reaction/context/RoutingContext.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useRouter } from \"next/router\";\nexport var RoutingContext = /*#__PURE__*/createContext({});\nexport var RoutingProvider = function RoutingProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(),\n      currentAsPath = _useState[0],\n      setCurrentAsPath = _useState[1];\n\n  var _useState2 = useState(),\n      currentRoute = _useState2[0],\n      setCurrentRoute = _useState2[1];\n\n  var _useState3 = useState(),\n      prevAsPath = _useState3[0],\n      setPrevAsPath = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      queryString = _useState4[0],\n      setQueryString = _useState4[1]; // eslint-disable-line no-unused-vars\n\n\n  var _useRouter = useRouter(),\n      asPath = _useRouter.asPath,\n      route = _useRouter.route,\n      query = _useRouter.query,\n      pathname = _useRouter.pathname;\n\n  var _useState5 = useState(),\n      tagId = _useState5[0],\n      setTagId = _useState5[1]; // We need asPath to have all details, but only change when route changes\n\n\n  useEffect(function () {\n    if (route !== currentRoute) {\n      setPrevAsPath(currentAsPath);\n      setCurrentAsPath(asPath);\n      setCurrentRoute(route);\n    }\n  }, [route, currentRoute, asPath]);\n\n  var setSearch = function setSearch(search) {// eslint-disable-line no-unused-vars\n\n    /*\n    const _query = { ...toJS(this.query), ...search };\n    const _slug = _query.slug;\n    const _limit = parseInt(_query.limit, 10);\n    delete _query.slug;\n     // Handle deleting query params\n    for (const key of Object.keys(_query)) {\n      if (_query[key] === null) {\n        delete _query[key];\n      }\n    }\n     // Validate limit\n    _query.limit = inPageSizes(_limit) ? _limit : PAGE_SIZES._20;\n    let urlQueryString = \"\";\n    Object.keys(_query).forEach((key, index, arr) => {\n      urlQueryString += `${key}=${_query[key]}`;\n       if (index < arr.length - 1) {\n        urlQueryString += \"&\";\n      }\n    });\n     this.queryString = urlQueryString;\n     let path;\n    if (this.requestPath) {\n      path = `${this.requestPath}?${this.queryString}`;\n    } else if (_slug) {\n      path = `${this.pathname}/${_slug}?${this.queryString}`;\n    } else if (process.browser) {\n      // allow for path instead of component name in URL\n      path = `${window.location.pathname}?${this.queryString}`;\n    } else {\n      path = `${this.pathname}?${this.queryString}`;\n    }\n     // Router is only available for the client (browser)\n    if (process.browser) {\n      // Router.push(path, path, { shallow: true, replace: true });\n    }\n     return path;\n    */\n  };\n\n  return /*#__PURE__*/React.createElement(RoutingContext.Provider, {\n    value: {\n      queryString: queryString,\n      tagId: tagId,\n      prevAsPath: prevAsPath,\n      setTagId: setTagId,\n      setSearch: setSearch,\n      query: query,\n      route: route,\n      pathname: pathname\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    },\n    __self: _this\n  }, children);\n};\n\n_s(RoutingProvider, \"R3YX11LupLYJ2BiIL3fZIM6oMBQ=\", false, function () {\n  return [useRouter];\n});\n\n_c = RoutingProvider;\nRoutingProvider.propTypes = {\n  children: PropTypes.node\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"RoutingProvider\");","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/src/reaction/context/RoutingContext.tsx"],"names":["createContext","useState","useEffect","PropTypes","useRouter","RoutingContext","RoutingProvider","children","currentAsPath","setCurrentAsPath","currentRoute","setCurrentRoute","prevAsPath","setPrevAsPath","queryString","setQueryString","asPath","route","query","pathname","tagId","setTagId","setSearch","search","propTypes","node"],"mappings":";;;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAO,IAAMC,cAAc,gBAAGL,aAAa,CAAC,EAAD,CAApC;AAEP,OAAO,IAAMM,eAAe,GAAG,SAAlBA,eAAkB,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBACLN,QAAQ,EADH;AAAA,MACxCO,aADwC;AAAA,MACzBC,gBADyB;;AAAA,mBAEPR,QAAQ,EAFD;AAAA,MAExCS,YAFwC;AAAA,MAE1BC,eAF0B;;AAAA,mBAGXV,QAAQ,EAHG;AAAA,MAGxCW,UAHwC;AAAA,MAG5BC,aAH4B;;AAAA,mBAITZ,QAAQ,CAAC,EAAD,CAJC;AAAA,MAIxCa,WAJwC;AAAA,MAI3BC,cAJ2B,kBAIK;;;AAJL,mBAMJX,SAAS,EANL;AAAA,MAMvCY,MANuC,cAMvCA,MANuC;AAAA,MAM/BC,KAN+B,cAM/BA,KAN+B;AAAA,MAMxBC,KANwB,cAMxBA,KANwB;AAAA,MAMjBC,QANiB,cAMjBA,QANiB;;AAAA,mBAQrBlB,QAAQ,EARa;AAAA,MAQxCmB,KARwC;AAAA,MAQjCC,QARiC,kBAU/C;;;AACAnB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIe,KAAK,KAAKP,YAAd,EAA4B;AAC1BG,MAAAA,aAAa,CAACL,aAAD,CAAb;AACAC,MAAAA,gBAAgB,CAACO,MAAD,CAAhB;AACAL,MAAAA,eAAe,CAACM,KAAD,CAAf;AACD;AACF,GANQ,EAMN,CAACA,KAAD,EAAQP,YAAR,EAAsBM,MAAtB,CANM,CAAT;;AAQA,MAAMM,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD,EAAY,CAAE;;AAC9B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQG,GA9CD;;AAgDA,sBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAC9BT,MAAAA,WAAW,EAAXA,WAD8B;AAE9BM,MAAAA,KAAK,EAALA,KAF8B;AAG9BR,MAAAA,UAAU,EAAVA,UAH8B;AAI9BS,MAAAA,QAAQ,EAARA,QAJ8B;AAK9BC,MAAAA,SAAS,EAATA,SAL8B;AAM9BJ,MAAAA,KAAK,EAALA,KAN8B;AAO9BD,MAAAA,KAAK,EAALA,KAP8B;AAQ9BE,MAAAA,QAAQ,EAARA;AAR8B,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWGZ,QAXH,CADF;AAeD,CAlFM;;GAAMD,e;UAMgCF,S;;;KANhCE,e;AAoFbA,eAAe,CAACkB,SAAhB,GAA4B;AAC1BjB,EAAAA,QAAQ,EAAEJ,SAAS,CAACsB;AADM,CAA5B","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useRouter } from \"next/router\";\n\nexport const RoutingContext = createContext({} as any);\n\nexport const RoutingProvider = ({ children }) => {\n  const [currentAsPath, setCurrentAsPath] = useState();\n  const [currentRoute, setCurrentRoute] = useState();\n  const [prevAsPath, setPrevAsPath] = useState();\n  const [queryString, setQueryString] = useState(\"\"); // eslint-disable-line no-unused-vars\n\n  const { asPath, route, query, pathname } = useRouter();\n\n  const [tagId, setTagId] = useState();\n\n  // We need asPath to have all details, but only change when route changes\n  useEffect(() => {\n    if (route !== currentRoute) {\n      setPrevAsPath(currentAsPath);\n      setCurrentAsPath(asPath);\n      setCurrentRoute(route);\n    }\n  }, [route, currentRoute, asPath]);\n\n  const setSearch = (search) => { // eslint-disable-line no-unused-vars\n    /*\n    const _query = { ...toJS(this.query), ...search };\n    const _slug = _query.slug;\n    const _limit = parseInt(_query.limit, 10);\n    delete _query.slug;\n\n    // Handle deleting query params\n    for (const key of Object.keys(_query)) {\n      if (_query[key] === null) {\n        delete _query[key];\n      }\n    }\n\n    // Validate limit\n    _query.limit = inPageSizes(_limit) ? _limit : PAGE_SIZES._20;\n    let urlQueryString = \"\";\n    Object.keys(_query).forEach((key, index, arr) => {\n      urlQueryString += `${key}=${_query[key]}`;\n\n      if (index < arr.length - 1) {\n        urlQueryString += \"&\";\n      }\n    });\n\n    this.queryString = urlQueryString;\n\n    let path;\n    if (this.requestPath) {\n      path = `${this.requestPath}?${this.queryString}`;\n    } else if (_slug) {\n      path = `${this.pathname}/${_slug}?${this.queryString}`;\n    } else if (process.browser) {\n      // allow for path instead of component name in URL\n      path = `${window.location.pathname}?${this.queryString}`;\n    } else {\n      path = `${this.pathname}?${this.queryString}`;\n    }\n\n    // Router is only available for the client (browser)\n    if (process.browser) {\n      // Router.push(path, path, { shallow: true, replace: true });\n    }\n\n    return path;\n    */\n  };\n\n  return (\n    <RoutingContext.Provider value={{\n      queryString,\n      tagId,\n      prevAsPath,\n      setTagId,\n      setSearch,\n      query,\n      route,\n      pathname\n    }}\n    >\n      {children}\n    </RoutingContext.Provider>\n  );\n};\n\nRoutingProvider.propTypes = {\n  children: PropTypes.node\n};\n"]},"metadata":{},"sourceType":"module"}