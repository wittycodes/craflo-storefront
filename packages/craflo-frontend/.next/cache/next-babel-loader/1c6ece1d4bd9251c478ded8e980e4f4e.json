{"ast":null,"code":"import { GraphQLClient } from \"graphql-request\";\nimport appConfig from \"config\";\n/**\n * Executes an arbitrary GraphQL query against the Reaction API\n *\n * @param {Object} query - The GraphQL query to execute\n * @param {Object} variables - The query's variables\n * @returns {Object} data - the resulting query data\n */\n\nexport default async function graphQLRequest(query, variables) {\n  const endpoint = appConfig.IS_BUILDING_NEXTJS === true ? appConfig.BUILD_GRAPHQL_URL : appConfig.INTERNAL_GRAPHQL_URL;\n\n  try {\n    const graphQLClient = new GraphQLClient(endpoint, {\n      timeout: 20000\n    });\n    const data = await graphQLClient.request(query, variables);\n    return data;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(\"error-fetching-graphql\", error);\n    return null;\n  }\n}","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/src/reaction/staticUtils/graphQLRequest.tsx"],"names":["GraphQLClient","appConfig","graphQLRequest","query","variables","endpoint","IS_BUILDING_NEXTJS","BUILD_GRAPHQL_URL","INTERNAL_GRAPHQL_URL","graphQLClient","timeout","data","request","error","console"],"mappings":"AAAA,SAASA,aAAT,QAA8B,iBAA9B;AACA,OAAOC,SAAP,MAAsB,QAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,eAAeC,cAAf,CAA8BC,KAA9B,EAAqCC,SAArC,EAAgD;AAC7D,QAAMC,QAAQ,GAAGJ,SAAS,CAACK,kBAAV,KAAiC,IAAjC,GAAwCL,SAAS,CAACM,iBAAlD,GAAsEN,SAAS,CAACO,oBAAjG;;AAEA,MAAI;AACF,UAAMC,aAAa,GAAG,IAAIT,aAAJ,CAAkBK,QAAlB,EAA4B;AAChDK,MAAAA,OAAO,EAAE;AADuC,KAA5B,CAAtB;AAIA,UAAMC,IAAI,GAAG,MAAMF,aAAa,CAACG,OAAd,CAAsBT,KAAtB,EAA6BC,SAA7B,CAAnB;AACA,WAAOO,IAAP;AACD,GAPD,CAOE,OAAOE,KAAP,EAAc;AACd;AACAC,IAAAA,OAAO,CAACD,KAAR,CAAc,wBAAd,EAAwCA,KAAxC;AACA,WAAO,IAAP;AACD;AACF","sourcesContent":["import { GraphQLClient } from \"graphql-request\";\nimport appConfig from \"config\";\n\n/**\n * Executes an arbitrary GraphQL query against the Reaction API\n *\n * @param {Object} query - The GraphQL query to execute\n * @param {Object} variables - The query's variables\n * @returns {Object} data - the resulting query data\n */\nexport default async function graphQLRequest(query, variables) {\n  const endpoint = appConfig.IS_BUILDING_NEXTJS === true ? appConfig.BUILD_GRAPHQL_URL : appConfig.INTERNAL_GRAPHQL_URL;\n\n  try {\n    const graphQLClient = new GraphQLClient(endpoint, {\n      timeout: 20000\n    });\n\n    const data = await graphQLClient.request(query, variables);\n    return data;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(\"error-fetching-graphql\", error);\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}