{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient, ApolloLink, HttpLink, InMemoryCache, fromPromise } from \"@apollo/client\";\nimport { setContext } from \"@apollo/link-context\";\nimport { onError } from \"@apollo/link-error\";\nimport fetch from \"isomorphic-unfetch\";\nimport { omitTypenameLink } from \"./omitVariableTypenameLink\";\nvar REFRESH_PATH = \"/refresh\";\nvar STATUS_BAD_REQUEST = 400;\nvar STATUS_UNAUTHORIZED = 401;\nvar token;\n/**\n * @summary Set the access token that GraphQL requests will use in the Authorization header\n * @param {String} value New token value\n * @return {undefined}\n */\n\nexport function setAccessToken(value) {\n  token = value;\n}\n\nvar getNewToken = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var result, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(REFRESH_PATH, {\n              method: \"GET\",\n              credentials: \"include\"\n            });\n\n          case 2:\n            result = _context.sent;\n            _context.next = 5;\n            return result.json();\n\n          case 5:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getNewToken() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar isRefreshing = false;\nvar pendingRequests = [];\n\nvar resolvePendingRequests = function resolvePendingRequests() {\n  pendingRequests.map(function (callback) {\n    return callback();\n  });\n  pendingRequests = [];\n};\n/**\n* Instantiate the Apollo client\n * @returns {Object} a new Apollo Client instance\n */\n\n\nexport default function createApolloClient() {\n  // Config\n  var graphqlUrl;\n  /* eslint-disable prefer-destructuring */\n\n  if (true) {\n    graphqlUrl = process.env.EXTERNAL_GRAPHQL_URL;\n  } else {\n    graphqlUrl = process.env.INTERNAL_GRAPHQL_URL;\n  }\n\n  var httpLink = new HttpLink({\n    uri: graphqlUrl,\n    credentials: \"same-origin\",\n    fetch: fetch\n  }); // error handling for Apollo Link\n\n  var errorLink = onError(function (apolloError) {\n    var graphQLErrors = apolloError.graphQLErrors,\n        networkError = apolloError.networkError,\n        operation = apolloError.operation,\n        forward = apolloError.forward;\n\n    if (graphQLErrors) {\n      graphQLErrors.forEach(function (_ref2) {\n        var message = _ref2.message,\n            locations = _ref2.locations,\n            path = _ref2.path;\n        // eslint-disable-next-line no-console\n        console.error(\"[GraphQL error]: \".concat(message), {\n          locations: locations,\n          operationName: operation && operation.operationName,\n          path: path\n        });\n      });\n    }\n\n    if (networkError) {\n      var errorCode = networkError.response && networkError.response.status;\n\n      if (errorCode === STATUS_UNAUTHORIZED) {\n        // If a 401 Unauthorized error occurred, silently refresh the token from /refresh.\n        // This will re-authenticate the user without showing a login page and a new token is issued.\n        var pendingRequestsQueue;\n\n        if (!isRefreshing) {\n          isRefreshing = true;\n          pendingRequestsQueue = fromPromise(getNewToken() // eslint-disable-next-line promise/always-return\n          .then(function (_ref3) {\n            var accessToken = _ref3.accessToken;\n            setAccessToken(accessToken);\n            resolvePendingRequests();\n          })[\"catch\"](function (error) {\n            pendingRequests = [];\n            setAccessToken(); // eslint-disable-next-line no-console\n\n            console.error(error);\n          })[\"finally\"](function () {\n            isRefreshing = false;\n          }));\n        } else {\n          // We already have a pending refresh, therefore add the request to the queue\n          // The request will be resolved after the token refresh finished and all previous requests resolved.\n          pendingRequestsQueue = fromPromise(new Promise(function (resolve) {\n            pendingRequests.push(function () {\n              return resolve();\n            });\n          }));\n        }\n\n        return pendingRequestsQueue.flatMap(function () {\n          return forward(operation);\n        });\n      }\n\n      if (errorCode !== STATUS_BAD_REQUEST) {\n        // eslint-disable-next-line no-console\n        console.error(\"Unable to access the GraphQL API. Is it running and accessible at \".concat(graphqlUrl, \" from the Storefront UI server?\"));\n      }\n    } // Default\n\n\n    return null;\n  }); // Set auth context\n  // https://github.com/apollographql/apollo-link/tree/master/packages/apollo-link-context\n\n  var authLink = setContext(function (_, _ref4) {\n    var headers = _ref4.headers;\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), token ? {\n        Authorization: token\n      } : {})\n    };\n  }); // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  return new ApolloClient({\n    ssrMode: false,\n    link: ApolloLink.from([omitTypenameLink, errorLink, authLink, httpLink]),\n    cache: new InMemoryCache({\n      typePolicies: {}\n    })\n  });\n}","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/src/reaction/lib/apollo/apolloClient.tsx"],"names":["ApolloClient","ApolloLink","HttpLink","InMemoryCache","fromPromise","setContext","onError","fetch","omitTypenameLink","REFRESH_PATH","STATUS_BAD_REQUEST","STATUS_UNAUTHORIZED","token","setAccessToken","value","getNewToken","method","credentials","result","json","data","isRefreshing","pendingRequests","resolvePendingRequests","map","callback","createApolloClient","graphqlUrl","process","env","EXTERNAL_GRAPHQL_URL","INTERNAL_GRAPHQL_URL","httpLink","uri","errorLink","apolloError","graphQLErrors","networkError","operation","forward","forEach","message","locations","path","console","error","operationName","errorCode","response","status","pendingRequestsQueue","then","accessToken","Promise","resolve","push","flatMap","authLink","_","headers","Authorization","ssrMode","link","from","cache","typePolicies"],"mappings":"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","sourcesContent":["import { ApolloClient, ApolloLink, HttpLink, InMemoryCache, fromPromise } from \"@apollo/client\";\nimport { setContext } from \"@apollo/link-context\";\nimport { onError } from \"@apollo/link-error\";\nimport fetch from \"isomorphic-unfetch\";\nimport { omitTypenameLink } from \"./omitVariableTypenameLink\";\n\nconst REFRESH_PATH = \"/refresh\";\nconst STATUS_BAD_REQUEST = 400;\nconst STATUS_UNAUTHORIZED = 401;\n\nlet token;\n\n/**\n * @summary Set the access token that GraphQL requests will use in the Authorization header\n * @param {String} value New token value\n * @return {undefined}\n */\nexport function setAccessToken(value) {\n  token = value;\n}\n\nconst getNewToken = async () => {\n  const result = await fetch(REFRESH_PATH, {\n    method: \"GET\",\n    credentials: \"include\"\n  });\n  const data = await result.json();\n\n  return data;\n};\n\nlet isRefreshing = false;\nlet pendingRequests = [];\n\nconst resolvePendingRequests = () => {\n  pendingRequests.map((callback) => callback());\n  pendingRequests = [];\n};\n\n/**\n* Instantiate the Apollo client\n * @returns {Object} a new Apollo Client instance\n */\nexport default function createApolloClient() {\n  // Config\n  let graphqlUrl;\n\n  /* eslint-disable prefer-destructuring */\n  if (process.browser) {\n    graphqlUrl = process.env.EXTERNAL_GRAPHQL_URL;\n  } else {\n    graphqlUrl = process.env.INTERNAL_GRAPHQL_URL;\n  }\n\n  const httpLink = new HttpLink({ uri: graphqlUrl, credentials: \"same-origin\", fetch });\n\n  // error handling for Apollo Link\n  const errorLink = onError((apolloError) => {\n    const { graphQLErrors, networkError, operation, forward } = apolloError;\n\n    if (graphQLErrors) {\n      graphQLErrors.forEach(({ message, locations, path }) => {\n        // eslint-disable-next-line no-console\n        console.error(`[GraphQL error]: ${message}`, {\n          locations,\n          operationName: operation && operation.operationName,\n          path\n        });\n      });\n    }\n\n    if (networkError) {\n      const errorCode = networkError.response && networkError.response.status;\n      if (errorCode === STATUS_UNAUTHORIZED) {\n        // If a 401 Unauthorized error occurred, silently refresh the token from /refresh.\n        // This will re-authenticate the user without showing a login page and a new token is issued.\n\n        let pendingRequestsQueue;\n        if (!isRefreshing) {\n          isRefreshing = true;\n          pendingRequestsQueue = fromPromise(getNewToken()\n          // eslint-disable-next-line promise/always-return\n            .then(({ accessToken }) => {\n              setAccessToken(accessToken);\n              resolvePendingRequests();\n            })\n            .catch((error) => {\n              pendingRequests = [];\n              setAccessToken();\n              // eslint-disable-next-line no-console\n              console.error(error);\n            })\n            .finally(() => {\n              isRefreshing = false;\n            }));\n        } else {\n          // We already have a pending refresh, therefore add the request to the queue\n          // The request will be resolved after the token refresh finished and all previous requests resolved.\n          pendingRequestsQueue = fromPromise(new Promise((resolve) => {\n            pendingRequests.push(() => resolve());\n          }));\n        }\n\n        return pendingRequestsQueue.flatMap(() => forward(operation));\n      }\n      if (errorCode !== STATUS_BAD_REQUEST) {\n        // eslint-disable-next-line no-console\n        console.error(`Unable to access the GraphQL API. Is it running and accessible at ${graphqlUrl} from the Storefront UI server?`);\n      }\n    }\n\n    // Default\n    return null;\n  });\n\n  // Set auth context\n  // https://github.com/apollographql/apollo-link/tree/master/packages/apollo-link-context\n  const authLink = setContext((_, { headers }) => ({\n    headers: {\n      ...headers,\n      ...(token ? { Authorization: token } : {})\n    }\n  }));\n\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: false,\n    link: ApolloLink.from([omitTypenameLink, errorLink, authLink, httpLink]),\n    cache: new InMemoryCache({\n      typePolicies: {\n      }\n    })\n  });\n}\n"]},"metadata":{},"sourceType":"module"}