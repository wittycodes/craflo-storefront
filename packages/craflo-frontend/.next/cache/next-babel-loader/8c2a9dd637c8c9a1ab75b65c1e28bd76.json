{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Paperbits. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file and at https://paperbits.io/license/mit.\n */\nimport { ClickCounterModel } from \"./clickCounterModel\";\nexport var ClickCounterModelBinder = /*#__PURE__*/function () {\n  function ClickCounterModelBinder() {\n    _classCallCheck(this, ClickCounterModelBinder);\n  }\n\n  _createClass(ClickCounterModelBinder, [{\n    key: \"canHandleContract\",\n    value: function canHandleContract(contract) {\n      return contract.type === \"header\";\n    }\n  }, {\n    key: \"canHandleModel\",\n    value: function canHandleModel(model) {\n      return model instanceof ClickCounterModel;\n    }\n  }, {\n    key: \"contractToModel\",\n    value: function () {\n      var _contractToModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(contract) {\n        var model;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                model = new ClickCounterModel();\n                return _context.abrupt(\"return\", model);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function contractToModel(_x) {\n        return _contractToModel.apply(this, arguments);\n      }\n\n      return contractToModel;\n    }()\n  }, {\n    key: \"modelToContract\",\n    value: function modelToContract(model) {\n      var contract = {\n        type: \"header\"\n      };\n      return contract;\n    }\n  }]);\n\n  return ClickCounterModelBinder;\n}();","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/src/paperbits/components/header/clickCounterModelBinder.ts"],"names":["ClickCounterModel","ClickCounterModelBinder","contract","type","model"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,iBAAT,QAAkC,qBAAlC;AAIA,WAAaC,uBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,sCAC6BC,QAD7B,EAC0D;AAClD,aAAOA,QAAQ,CAACC,IAAT,KAAkB,QAAzB;AACH;AAHL;AAAA;AAAA,mCAK0BC,KAL1B,EAK6D;AACrD,aAAOA,KAAK,YAAYJ,iBAAxB;AACH;AAPL;AAAA;AAAA;AAAA,uGASiCE,QATjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAUcE,gBAAAA,KAVd,GAUsB,IAAIJ,iBAAJ,EAVtB;AAAA,iDAWeI,KAXf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oCAc2BA,KAd3B,EAc+D;AACvD,UAAMF,QAA8B,GAAG;AACnCC,QAAAA,IAAI,EAAE;AAD6B,OAAvC;AAIA,aAAOD,QAAP;AACH;AApBL;;AAAA;AAAA","sourcesContent":["/**\n * @license\n * Copyright Paperbits. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file and at https://paperbits.io/license/mit.\n */\n\nimport { IModelBinder } from \"@paperbits/common/editing\";\nimport { ClickCounterModel } from \"./clickCounterModel\";\nimport { Contract } from \"@paperbits/common\";\nimport { ClickCounterContract } from \"./clickCounterContract\";\n\nexport class ClickCounterModelBinder implements IModelBinder<ClickCounterModel> {\n    public canHandleContract(contract: Contract): boolean {\n        return contract.type === \"header\";\n    }\n\n    public canHandleModel(model: ClickCounterModel): boolean {\n        return model instanceof ClickCounterModel;\n    }\n\n    public async contractToModel(contract: ClickCounterContract): Promise<ClickCounterModel> {\n        const model = new ClickCounterModel();\n        return model;\n    }\n\n    public modelToContract(model: ClickCounterModel): Contract {\n        const contract: ClickCounterContract = {\n            type: \"header\"\n        };\n\n        return contract;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}