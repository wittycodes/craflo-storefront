{"ast":null,"code":"var _dec, _dec2, _class, _class2;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\n/**\n * @license\n * Copyright Paperbits. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file and at https://paperbits.io/license/mit.\n */\nimport template from \"./app.html\";\nimport { Component, OnMounted } from \"@paperbits/common/ko/decorators\";\nexport let App = (_dec = Component({\n  selector: \"app\",\n  template: template\n}), _dec2 = OnMounted(), _dec(_class = (_class2 = /*#__PURE__*/function () {\n  function App(logger, viewManager) {\n    _classCallCheck(this, App);\n  }\n\n  _createClass(App, [{\n    key: \"initialize\",\n    value: async function initialize() {\n      this.viewManager.setHost({\n        name: \"page-host\"\n      });\n      this.viewManager.showToolboxes();\n      this.logger.trackEvent(\"Startup\", {\n        message: `App started.`\n      });\n    }\n  }]);\n\n  return App;\n}(), (_applyDecoratedDescriptor(_class2.prototype, \"initialize\", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, \"initialize\"), _class2.prototype)), _class2)) || _class);","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/src/paperbits/components/app/app.ts"],"names":["template","Component","OnMounted","App","selector","logger","viewManager","setHost","name","showToolboxes","trackEvent","message"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,QAAP,MAAqB,YAArB;AAEA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,iCAArC;AAOA,WAAaC,GAAb,WAJCF,SAAS,CAAC;AACPG,EAAAA,QAAQ,EAAE,KADH;AAEPJ,EAAAA,QAAQ,EAAEA;AAFH,CAAD,CAIV,UAMKE,SAAS,EANd;AACI,eACqBG,MADrB,EAEqBC,WAFrB,EAGE;AAAA;AAAG;;AAJT;AAAA;AAAA,uCAO6C;AACrC,WAAKA,WAAL,CAAiBC,OAAjB,CAAyB;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAzB;AACA,WAAKF,WAAL,CAAiBG,aAAjB;AACA,WAAKJ,MAAL,CAAYK,UAAZ,CAAuB,SAAvB,EAAkC;AAAEC,QAAAA,OAAO,EAAG;AAAZ,OAAlC;AACH;AAXL;;AAAA;AAAA","sourcesContent":["/**\n * @license\n * Copyright Paperbits. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file and at https://paperbits.io/license/mit.\n */\n\nimport template from \"./app.html\";\nimport { ViewManager } from \"@paperbits/common/ui\";\nimport { Component, OnMounted } from \"@paperbits/common/ko/decorators\";\nimport { Logger } from \"@paperbits/common/logging\";\n\n@Component({\n    selector: \"app\",\n    template: template\n})\nexport class App {\n    constructor(\n        private readonly logger: Logger,\n        private readonly viewManager: ViewManager\n    ) { }\n\n    @OnMounted()\n    public async initialize(): Promise<void> {\n        this.viewManager.setHost({ name: \"page-host\" });\n        this.viewManager.showToolboxes();\n        this.logger.trackEvent(\"Startup\", { message: `App started.` });\n    }\n}"]},"metadata":{},"sourceType":"module"}