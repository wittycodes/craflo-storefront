{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/usr/local/src/app/packages/craflo-frontend/src/reaction/lib/apollo/withApollo.tsx\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nimport { ApolloProvider } from \"@apollo/react-components\";\nimport { ApolloProvider as NewApolloProvider } from \"@apollo/client\";\nimport createApolloClient from \"./apolloClient\"; // On the client we store the apollo client in the following variable\n// this prevents the client from reinitializing between page transitions.\n\nlet globalApolloClient = null;\n\nconst initApolloClient = () => {\n  // Reuse client on the client-side\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient();\n  }\n\n  return globalApolloClient;\n};\n\nexport const withApollo = () => PageComponent => {\n  const WithApollo = (_ref) => {\n    let pageProps = Object.assign({}, _ref);\n    const client = initApolloClient();\n    return /*#__PURE__*/React.createElement(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      },\n      __self: this\n    }, /*#__PURE__*/React.createElement(NewApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      },\n      __self: this\n    }, /*#__PURE__*/React.createElement(PageComponent, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      },\n      __self: this\n    }))));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    const displayName = PageComponent.displayName || PageComponent.name || \"Component\";\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  return WithApollo;\n};","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/src/reaction/lib/apollo/withApollo.tsx"],"names":["React","ApolloProvider","NewApolloProvider","createApolloClient","globalApolloClient","initApolloClient","withApollo","PageComponent","WithApollo","pageProps","client","displayName","name"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASA,cAAc,IAAIC,iBAA3B,QAAoD,gBAApD;AACA,OAAOC,kBAAP,MAA+B,gBAA/B,C,CAEA;AACA;;AACA,IAAIC,kBAAkB,GAAG,IAAzB;;AAGA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B;AACA,MAAI,CAACD,kBAAL,EAAyB;AACvBA,IAAAA,kBAAkB,GAAGD,kBAAkB,EAAvC;AACD;;AAED,SAAOC,kBAAP;AACD,CAPD;;AASA,OAAO,MAAME,UAAU,GAAG,MAAOC,aAAD,IAAmB;AACjD,QAAMC,UAAU,GAAG,UAAsB;AAAA,QAAhBC,SAAgB;AACvC,UAAMC,MAAM,GAAGL,gBAAgB,EAA/B;AAEA,wBACE,oBAAC,cAAD;AAAgB,MAAA,MAAM,EAAEK,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,iBAAD;AAAmB,MAAA,MAAM,EAAEA,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,aAAD,eAAmBD,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF,CADF;AAOD,GAVD,CADiD,CAajD;;;AACA,YAA2C;AACzC,UAAME,WAAW,GAAGJ,aAAa,CAACI,WAAd,IAA6BJ,aAAa,CAACK,IAA3C,IAAmD,WAAvE;AACAJ,IAAAA,UAAU,CAACG,WAAX,GAA0B,cAAaA,WAAY,GAAnD;AACD;;AAED,SAAOH,UAAP;AACD,CApBM","sourcesContent":["import React from \"react\";\nimport { ApolloProvider } from \"@apollo/react-components\";\nimport { ApolloProvider as NewApolloProvider } from \"@apollo/client\";\nimport createApolloClient from \"./apolloClient\";\n\n// On the client we store the apollo client in the following variable\n// this prevents the client from reinitializing between page transitions.\nlet globalApolloClient = null;\n\n\nconst initApolloClient = () => {\n  // Reuse client on the client-side\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient();\n  }\n\n  return globalApolloClient;\n};\n\nexport const withApollo = () => (PageComponent) => {\n  const WithApollo = ({ ...pageProps }) => {\n    const client = initApolloClient();\n\n    return (\n      <ApolloProvider client={client}>\n        <NewApolloProvider client={client}>\n          <PageComponent {...pageProps} />\n        </NewApolloProvider>\n      </ApolloProvider>\n    );\n  };\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== \"production\") {\n    const displayName = PageComponent.displayName || PageComponent.name || \"Component\";\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  return WithApollo;\n};\n"]},"metadata":{},"sourceType":"module"}