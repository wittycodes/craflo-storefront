{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/usr/local/src/app/packages/craflo-frontend/src/reaction/context/LocaleContext.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { createContext, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useRouter } from \"next/router\";\nimport isLocale from \"translations/isLocale\";\nexport var LocaleContext = /*#__PURE__*/createContext({});\nexport var LocaleProvider = function LocaleProvider(_ref) {\n  _s();\n\n  var lang = _ref.lang,\n      translations = _ref.translations,\n      namespaces = _ref.namespaces,\n      children = _ref.children;\n\n  var _useState = useState({\n    lang: lang,\n    translations: translations,\n    namespaces: namespaces\n  }),\n      localeData = _useState[0],\n      setLocaleData = _useState[1];\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  useEffect(function () {\n    if (localeData.lang !== localStorage.getItem(\"locale\")) {\n      localStorage.setItem(\"locale\", localeData.lang);\n    }\n  }, [localeData.lang]); // If translations updated, add them to state\n\n  useEffect(function () {\n    if (translations !== localeData.translations) {\n      setLocaleData(_objectSpread(_objectSpread({}, localeData), {}, {\n        translations: translations\n      }));\n    }\n  }, [translations, localeData]); // If namespaces updated, add them to state\n\n  useEffect(function () {\n    if (namespaces !== localeData.namespaces) {\n      setLocaleData(_objectSpread(_objectSpread({}, localeData), {}, {\n        namespaces: namespaces\n      }));\n    }\n  }, [namespaces, localeData]); // If query lang updated, update lang\n\n  useEffect(function () {\n    if (typeof query.lang === \"string\" && isLocale(query.lang) && localeData.lang !== query.lang) {\n      setLocaleData(_objectSpread(_objectSpread({}, localeData), {}, {\n        lang: query.lang\n      }));\n    }\n  }, [query.lang, localeData]);\n  return /*#__PURE__*/React.createElement(LocaleContext.Provider, {\n    value: {\n      localeData: localeData,\n      setLocaleData: setLocaleData\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, children);\n};\n\n_s(LocaleProvider, \"31kBVGn7JRlP4EX0cRB3YY93viM=\", false, function () {\n  return [useRouter];\n});\n\n_c = LocaleProvider;\nLocaleProvider.propTypes = {\n  children: PropTypes.node,\n  lang: PropTypes.string,\n  namespaces: PropTypes.array,\n  translations: PropTypes.array\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"LocaleProvider\");","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/src/reaction/context/LocaleContext.tsx"],"names":["React","createContext","useState","useEffect","PropTypes","useRouter","isLocale","LocaleContext","LocaleProvider","lang","translations","namespaces","children","localeData","setLocaleData","query","localStorage","getItem","setItem","propTypes","node","string","array"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,QAAP,MAAqB,uBAArB;AAEA,OAAO,IAAMC,aAAa,gBAAGN,aAAa,CAAC,EAAD,CAAnC;AAEP,OAAO,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,OAAkD;AAAA;;AAAA,MAA/CC,IAA+C,QAA/CA,IAA+C;AAAA,MAAzCC,YAAyC,QAAzCA,YAAyC;AAAA,MAA3BC,UAA2B,QAA3BA,UAA2B;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBAC1CV,QAAQ,CAAC;AAAEO,IAAAA,IAAI,EAAJA,IAAF;AAAQC,IAAAA,YAAY,EAAZA,YAAR;AAAsBC,IAAAA,UAAU,EAAVA;AAAtB,GAAD,CADkC;AAAA,MACvEE,UADuE;AAAA,MAC3DC,aAD2D;;AAAA,mBAE5DT,SAAS,EAFmD;AAAA,MAEtEU,KAFsE,cAEtEA,KAFsE;;AAI9EZ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIU,UAAU,CAACJ,IAAX,KAAoBO,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAxB,EAAwD;AACtDD,MAAAA,YAAY,CAACE,OAAb,CAAqB,QAArB,EAA+BL,UAAU,CAACJ,IAA1C;AACD;AACF,GAJQ,EAIN,CAACI,UAAU,CAACJ,IAAZ,CAJM,CAAT,CAJ8E,CAU9E;;AACAN,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIO,YAAY,KAAKG,UAAU,CAACH,YAAhC,EAA8C;AAC5CI,MAAAA,aAAa,iCAAMD,UAAN;AAAkBH,QAAAA,YAAY,EAAZA;AAAlB,SAAb;AACD;AACF,GAJQ,EAIN,CAACA,YAAD,EAAeG,UAAf,CAJM,CAAT,CAX8E,CAiB9E;;AACAV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIQ,UAAU,KAAKE,UAAU,CAACF,UAA9B,EAA0C;AACxCG,MAAAA,aAAa,iCAAMD,UAAN;AAAkBF,QAAAA,UAAU,EAAVA;AAAlB,SAAb;AACD;AACF,GAJQ,EAIN,CAACA,UAAD,EAAaE,UAAb,CAJM,CAAT,CAlB8E,CAwB9E;;AACAV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,OAAOY,KAAK,CAACN,IAAb,KAAsB,QAAtB,IAAkCH,QAAQ,CAACS,KAAK,CAACN,IAAP,CAA1C,IAA0DI,UAAU,CAACJ,IAAX,KAAoBM,KAAK,CAACN,IAAxF,EAA8F;AAC5FK,MAAAA,aAAa,iCAAMD,UAAN;AAAkBJ,QAAAA,IAAI,EAAEM,KAAK,CAACN;AAA9B,SAAb;AACD;AACF,GAJQ,EAIN,CAACM,KAAK,CAACN,IAAP,EAAaI,UAAb,CAJM,CAAT;AAMA,sBACE,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEA,MAAAA,UAAU,EAAVA,UAAF;AAAcC,MAAAA,aAAa,EAAbA;AAAd,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,QADH,CADF;AAKD,CApCM;;GAAMJ,c;UAEOH,S;;;KAFPG,c;AAsCbA,cAAc,CAACW,SAAf,GAA2B;AACzBP,EAAAA,QAAQ,EAAER,SAAS,CAACgB,IADK;AAEzBX,EAAAA,IAAI,EAAEL,SAAS,CAACiB,MAFS;AAGzBV,EAAAA,UAAU,EAAEP,SAAS,CAACkB,KAHG;AAIzBZ,EAAAA,YAAY,EAAEN,SAAS,CAACkB;AAJC,CAA3B","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useRouter } from \"next/router\";\nimport isLocale from \"translations/isLocale\";\n\nexport const LocaleContext = createContext({} as any);\n\nexport const LocaleProvider = ({ lang, translations, namespaces, children }) => {\n  const [localeData, setLocaleData] = useState({ lang, translations, namespaces });\n  const { query } = useRouter();\n\n  useEffect(() => {\n    if (localeData.lang !== localStorage.getItem(\"locale\")) {\n      localStorage.setItem(\"locale\", localeData.lang);\n    }\n  }, [localeData.lang]);\n\n  // If translations updated, add them to state\n  useEffect(() => {\n    if (translations !== localeData.translations) {\n      setLocaleData({ ...localeData, translations });\n    }\n  }, [translations, localeData]);\n\n  // If namespaces updated, add them to state\n  useEffect(() => {\n    if (namespaces !== localeData.namespaces) {\n      setLocaleData({ ...localeData, namespaces });\n    }\n  }, [namespaces, localeData]);\n\n  // If query lang updated, update lang\n  useEffect(() => {\n    if (typeof query.lang === \"string\" && isLocale(query.lang) && localeData.lang !== query.lang) {\n      setLocaleData({ ...localeData, lang: query.lang });\n    }\n  }, [query.lang, localeData]);\n\n  return (\n    <LocaleContext.Provider value={{ localeData, setLocaleData }}>\n      {children}\n    </LocaleContext.Provider>\n  );\n};\n\nLocaleProvider.propTypes = {\n  children: PropTypes.node,\n  lang: PropTypes.string,\n  namespaces: PropTypes.array,\n  translations: PropTypes.array\n};\n"]},"metadata":{},"sourceType":"module"}