{"ast":null,"code":"var _jsxFileName = \"/usr/local/src/app/packages/craflo-frontend/src/reaction/context/RoutingContext.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useRouter } from \"next/router\";\nexport const RoutingContext = /*#__PURE__*/createContext({});\nexport const RoutingProvider = ({\n  children\n}) => {\n  const {\n    0: currentAsPath,\n    1: setCurrentAsPath\n  } = useState();\n  const {\n    0: currentRoute,\n    1: setCurrentRoute\n  } = useState();\n  const {\n    0: prevAsPath,\n    1: setPrevAsPath\n  } = useState();\n  const {\n    0: queryString,\n    1: setQueryString\n  } = useState(\"\"); // eslint-disable-line no-unused-vars\n\n  const {\n    asPath,\n    route,\n    query,\n    pathname\n  } = useRouter();\n  const {\n    0: tagId,\n    1: setTagId\n  } = useState(); // We need asPath to have all details, but only change when route changes\n\n  useEffect(() => {\n    if (route !== currentRoute) {\n      setPrevAsPath(currentAsPath);\n      setCurrentAsPath(asPath);\n      setCurrentRoute(route);\n    }\n  }, [route, currentRoute, asPath]);\n\n  const setSearch = search => {// eslint-disable-line no-unused-vars\n\n    /*\n    const _query = { ...toJS(this.query), ...search };\n    const _slug = _query.slug;\n    const _limit = parseInt(_query.limit, 10);\n    delete _query.slug;\n     // Handle deleting query params\n    for (const key of Object.keys(_query)) {\n      if (_query[key] === null) {\n        delete _query[key];\n      }\n    }\n     // Validate limit\n    _query.limit = inPageSizes(_limit) ? _limit : PAGE_SIZES._20;\n    let urlQueryString = \"\";\n    Object.keys(_query).forEach((key, index, arr) => {\n      urlQueryString += `${key}=${_query[key]}`;\n       if (index < arr.length - 1) {\n        urlQueryString += \"&\";\n      }\n    });\n     this.queryString = urlQueryString;\n     let path;\n    if (this.requestPath) {\n      path = `${this.requestPath}?${this.queryString}`;\n    } else if (_slug) {\n      path = `${this.pathname}/${_slug}?${this.queryString}`;\n    } else if (process.browser) {\n      // allow for path instead of component name in URL\n      path = `${window.location.pathname}?${this.queryString}`;\n    } else {\n      path = `${this.pathname}?${this.queryString}`;\n    }\n     // Router is only available for the client (browser)\n    if (process.browser) {\n      // Router.push(path, path, { shallow: true, replace: true });\n    }\n     return path;\n    */\n  };\n\n  return /*#__PURE__*/React.createElement(RoutingContext.Provider, {\n    value: {\n      queryString,\n      tagId,\n      prevAsPath,\n      setTagId,\n      setSearch,\n      query,\n      route,\n      pathname\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, children);\n};\nRoutingProvider.propTypes = {\n  children: PropTypes.node\n};","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/src/reaction/context/RoutingContext.tsx"],"names":["createContext","useState","useEffect","PropTypes","useRouter","RoutingContext","RoutingProvider","children","currentAsPath","setCurrentAsPath","currentRoute","setCurrentRoute","prevAsPath","setPrevAsPath","queryString","setQueryString","asPath","route","query","pathname","tagId","setTagId","setSearch","search","propTypes","node"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAO,MAAMC,cAAc,gBAAGL,aAAa,CAAC,EAAD,CAApC;AAEP,OAAO,MAAMM,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC/C,QAAM;AAAA,OAACC,aAAD;AAAA,OAAgBC;AAAhB,MAAoCR,QAAQ,EAAlD;AACA,QAAM;AAAA,OAACS,YAAD;AAAA,OAAeC;AAAf,MAAkCV,QAAQ,EAAhD;AACA,QAAM;AAAA,OAACW,UAAD;AAAA,OAAaC;AAAb,MAA8BZ,QAAQ,EAA5C;AACA,QAAM;AAAA,OAACa,WAAD;AAAA,OAAcC;AAAd,MAAgCd,QAAQ,CAAC,EAAD,CAA9C,CAJ+C,CAIK;;AAEpD,QAAM;AAAEe,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA;AAAxB,MAAqCf,SAAS,EAApD;AAEA,QAAM;AAAA,OAACgB,KAAD;AAAA,OAAQC;AAAR,MAAoBpB,QAAQ,EAAlC,CAR+C,CAU/C;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,KAAK,KAAKP,YAAd,EAA4B;AAC1BG,MAAAA,aAAa,CAACL,aAAD,CAAb;AACAC,MAAAA,gBAAgB,CAACO,MAAD,CAAhB;AACAL,MAAAA,eAAe,CAACM,KAAD,CAAf;AACD;AACF,GANQ,EAMN,CAACA,KAAD,EAAQP,YAAR,EAAsBM,MAAtB,CANM,CAAT;;AAQA,QAAMM,SAAS,GAAIC,MAAD,IAAY,CAAE;;AAC9B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQG,GA9CD;;AAgDA,sBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAC9BT,MAAAA,WAD8B;AAE9BM,MAAAA,KAF8B;AAG9BR,MAAAA,UAH8B;AAI9BS,MAAAA,QAJ8B;AAK9BC,MAAAA,SAL8B;AAM9BJ,MAAAA,KAN8B;AAO9BD,MAAAA,KAP8B;AAQ9BE,MAAAA;AAR8B,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWGZ,QAXH,CADF;AAeD,CAlFM;AAoFPD,eAAe,CAACkB,SAAhB,GAA4B;AAC1BjB,EAAAA,QAAQ,EAAEJ,SAAS,CAACsB;AADM,CAA5B","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useRouter } from \"next/router\";\n\nexport const RoutingContext = createContext({} as any);\n\nexport const RoutingProvider = ({ children }) => {\n  const [currentAsPath, setCurrentAsPath] = useState();\n  const [currentRoute, setCurrentRoute] = useState();\n  const [prevAsPath, setPrevAsPath] = useState();\n  const [queryString, setQueryString] = useState(\"\"); // eslint-disable-line no-unused-vars\n\n  const { asPath, route, query, pathname } = useRouter();\n\n  const [tagId, setTagId] = useState();\n\n  // We need asPath to have all details, but only change when route changes\n  useEffect(() => {\n    if (route !== currentRoute) {\n      setPrevAsPath(currentAsPath);\n      setCurrentAsPath(asPath);\n      setCurrentRoute(route);\n    }\n  }, [route, currentRoute, asPath]);\n\n  const setSearch = (search) => { // eslint-disable-line no-unused-vars\n    /*\n    const _query = { ...toJS(this.query), ...search };\n    const _slug = _query.slug;\n    const _limit = parseInt(_query.limit, 10);\n    delete _query.slug;\n\n    // Handle deleting query params\n    for (const key of Object.keys(_query)) {\n      if (_query[key] === null) {\n        delete _query[key];\n      }\n    }\n\n    // Validate limit\n    _query.limit = inPageSizes(_limit) ? _limit : PAGE_SIZES._20;\n    let urlQueryString = \"\";\n    Object.keys(_query).forEach((key, index, arr) => {\n      urlQueryString += `${key}=${_query[key]}`;\n\n      if (index < arr.length - 1) {\n        urlQueryString += \"&\";\n      }\n    });\n\n    this.queryString = urlQueryString;\n\n    let path;\n    if (this.requestPath) {\n      path = `${this.requestPath}?${this.queryString}`;\n    } else if (_slug) {\n      path = `${this.pathname}/${_slug}?${this.queryString}`;\n    } else if (process.browser) {\n      // allow for path instead of component name in URL\n      path = `${window.location.pathname}?${this.queryString}`;\n    } else {\n      path = `${this.pathname}?${this.queryString}`;\n    }\n\n    // Router is only available for the client (browser)\n    if (process.browser) {\n      // Router.push(path, path, { shallow: true, replace: true });\n    }\n\n    return path;\n    */\n  };\n\n  return (\n    <RoutingContext.Provider value={{\n      queryString,\n      tagId,\n      prevAsPath,\n      setTagId,\n      setSearch,\n      query,\n      route,\n      pathname\n    }}\n    >\n      {children}\n    </RoutingContext.Provider>\n  );\n};\n\nRoutingProvider.propTypes = {\n  children: PropTypes.node\n};\n"]},"metadata":{},"sourceType":"module"}