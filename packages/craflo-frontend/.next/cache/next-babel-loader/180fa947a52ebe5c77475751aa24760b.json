{"ast":null,"code":"import OAuth2Strategy from \"passport-oauth2\";\nimport passport from \"passport\";\nimport sessions from \"client-sessions\";\nimport appConfig from \"config.js\";\nimport redirect from \"./redirect\";\nexport { default as passport } from \"passport\";\nlet baseUrl = appConfig.CANONICAL_URL;\nif (!baseUrl.endsWith(\"/\")) baseUrl = `${baseUrl}/`;\nconst oauthRedirectUrl = `${baseUrl}callback`; // This is needed to allow custom parameters (e.g. loginActions) to be included\n// when requesting authorization. This is setup to allow only loginAction to pass through\n\nOAuth2Strategy.prototype.authorizationParams = function (options = {}) {\n  return {\n    loginAction: options.loginAction\n  };\n};\n\npassport.use(\"oauth2\", new OAuth2Strategy({\n  authorizationURL: appConfig.OAUTH2_AUTH_URL,\n  tokenURL: appConfig.OAUTH2_TOKEN_URL,\n  clientID: appConfig.OAUTH2_CLIENT_ID,\n  clientSecret: appConfig.OAUTH2_CLIENT_SECRET,\n  callbackURL: oauthRedirectUrl,\n  state: true,\n  scope: [\"offline\", \"openid\"]\n}, (accessToken, refreshToken, params, profile, cb) => {\n  cb(null, {\n    accessToken,\n    refreshToken,\n    idToken: params.id_token\n  });\n}));\npassport.serializeUser((user, done) => {\n  done(null, JSON.stringify(user));\n});\npassport.deserializeUser((user, done) => {\n  done(null, JSON.parse(user));\n});\nexport default (handler => (req, res) => {\n  if (!res.redirect) {\n    res.redirect = location => redirect(res, 302, location);\n  }\n\n  sessions({\n    cookieName: \"session\",\n    // This name is required so passport picks it up correctly\n    secret: appConfig.SESSION_SECRET,\n    duration: appConfig.SESSION_MAX_AGE_MS\n  })(req, res, () => passport.initialize()(req, res, () => passport.session()(req, res, () => handler(req, res))));\n});","map":{"version":3,"sources":["/usr/local/src/app/packages/craflo-frontend/src/reaction/apiUtils/passportMiddleware.tsx"],"names":["OAuth2Strategy","passport","sessions","appConfig","redirect","default","baseUrl","CANONICAL_URL","endsWith","oauthRedirectUrl","prototype","authorizationParams","options","loginAction","use","authorizationURL","OAUTH2_AUTH_URL","tokenURL","OAUTH2_TOKEN_URL","clientID","OAUTH2_CLIENT_ID","clientSecret","OAUTH2_CLIENT_SECRET","callbackURL","state","scope","accessToken","refreshToken","params","profile","cb","idToken","id_token","serializeUser","user","done","JSON","stringify","deserializeUser","parse","handler","req","res","location","cookieName","secret","SESSION_SECRET","duration","SESSION_MAX_AGE_MS","initialize","session"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,iBAA3B;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,SAASC,OAAO,IAAIJ,QAApB,QAAoC,UAApC;AAEA,IAAIK,OAAO,GAAGH,SAAS,CAACI,aAAxB;AACA,IAAI,CAACD,OAAO,CAACE,QAAR,CAAiB,GAAjB,CAAL,EAA4BF,OAAO,GAAI,GAAEA,OAAQ,GAArB;AAE5B,MAAMG,gBAAgB,GAAI,GAAEH,OAAQ,UAApC,C,CAEA;AACA;;AACAN,cAAc,CAACU,SAAf,CAAyBC,mBAAzB,GAA+C,UAAUC,OAAO,GAAG,EAApB,EAAwB;AACrE,SAAO;AAAEC,IAAAA,WAAW,EAAED,OAAO,CAACC;AAAvB,GAAP;AACD,CAFD;;AAIAZ,QAAQ,CAACa,GAAT,CAAa,QAAb,EAAuB,IAAId,cAAJ,CAAmB;AACxCe,EAAAA,gBAAgB,EAAEZ,SAAS,CAACa,eADY;AAExCC,EAAAA,QAAQ,EAAEd,SAAS,CAACe,gBAFoB;AAGxCC,EAAAA,QAAQ,EAAEhB,SAAS,CAACiB,gBAHoB;AAIxCC,EAAAA,YAAY,EAAElB,SAAS,CAACmB,oBAJgB;AAKxCC,EAAAA,WAAW,EAAEd,gBAL2B;AAMxCe,EAAAA,KAAK,EAAE,IANiC;AAOxCC,EAAAA,KAAK,EAAE,CAAC,SAAD,EAAY,QAAZ;AAPiC,CAAnB,EAQpB,CAACC,WAAD,EAAcC,YAAd,EAA4BC,MAA5B,EAAoCC,OAApC,EAA6CC,EAA7C,KAAoD;AACrDA,EAAAA,EAAE,CAAC,IAAD,EAAO;AAAEJ,IAAAA,WAAF;AAAeC,IAAAA,YAAf;AAA6BI,IAAAA,OAAO,EAAEH,MAAM,CAACI;AAA7C,GAAP,CAAF;AACD,CAVsB,CAAvB;AAYA/B,QAAQ,CAACgC,aAAT,CAAuB,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACrCA,EAAAA,IAAI,CAAC,IAAD,EAAOC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAP,CAAJ;AACD,CAFD;AAIAjC,QAAQ,CAACqC,eAAT,CAAyB,CAACJ,IAAD,EAAOC,IAAP,KAAgB;AACvCA,EAAAA,IAAI,CAAC,IAAD,EAAOC,IAAI,CAACG,KAAL,CAAWL,IAAX,CAAP,CAAJ;AACD,CAFD;AAIA,gBAAgBM,OAAD,IAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACxC,MAAI,CAACA,GAAG,CAACtC,QAAT,EAAmB;AACjBsC,IAAAA,GAAG,CAACtC,QAAJ,GAAgBuC,QAAD,IAAcvC,QAAQ,CAACsC,GAAD,EAAM,GAAN,EAAWC,QAAX,CAArC;AACD;;AACDzC,EAAAA,QAAQ,CAAC;AACP0C,IAAAA,UAAU,EAAE,SADL;AACgB;AACvBC,IAAAA,MAAM,EAAE1C,SAAS,CAAC2C,cAFX;AAGPC,IAAAA,QAAQ,EAAE5C,SAAS,CAAC6C;AAHb,GAAD,CAAR,CAIGP,GAJH,EAIQC,GAJR,EAIa,MACXzC,QAAQ,CAACgD,UAAT,GAAsBR,GAAtB,EAA2BC,GAA3B,EAAgC,MAC9BzC,QAAQ,CAACiD,OAAT,GAAmBT,GAAnB,EAAwBC,GAAxB,EAA6B,MAC3BF,OAAO,CAACC,GAAD,EAAMC,GAAN,CADT,CADF,CALF;AAQD,CAZD","sourcesContent":["import OAuth2Strategy from \"passport-oauth2\";\nimport passport from \"passport\";\nimport sessions from \"client-sessions\";\nimport appConfig from \"config.js\";\nimport redirect from \"./redirect\";\n\nexport { default as passport } from \"passport\";\n\nlet baseUrl = appConfig.CANONICAL_URL;\nif (!baseUrl.endsWith(\"/\")) baseUrl = `${baseUrl}/`;\n\nconst oauthRedirectUrl = `${baseUrl}callback`;\n\n// This is needed to allow custom parameters (e.g. loginActions) to be included\n// when requesting authorization. This is setup to allow only loginAction to pass through\nOAuth2Strategy.prototype.authorizationParams = function (options = {}) {\n  return { loginAction: options.loginAction };\n};\n\npassport.use(\"oauth2\", new OAuth2Strategy({\n  authorizationURL: appConfig.OAUTH2_AUTH_URL,\n  tokenURL: appConfig.OAUTH2_TOKEN_URL,\n  clientID: appConfig.OAUTH2_CLIENT_ID,\n  clientSecret: appConfig.OAUTH2_CLIENT_SECRET,\n  callbackURL: oauthRedirectUrl,\n  state: true,\n  scope: [\"offline\", \"openid\"]\n}, (accessToken, refreshToken, params, profile, cb) => {\n  cb(null, { accessToken, refreshToken, idToken: params.id_token });\n}));\n\npassport.serializeUser((user, done) => {\n  done(null, JSON.stringify(user));\n});\n\npassport.deserializeUser((user, done) => {\n  done(null, JSON.parse(user));\n});\n\nexport default (handler) => (req, res) => {\n  if (!res.redirect) {\n    res.redirect = (location) => redirect(res, 302, location);\n  }\n  sessions({\n    cookieName: \"session\", // This name is required so passport picks it up correctly\n    secret: appConfig.SESSION_SECRET,\n    duration: appConfig.SESSION_MAX_AGE_MS\n  })(req, res, () =>\n    passport.initialize()(req, res, () =>\n      passport.session()(req, res, () =>\n        handler(req, res))));\n};\n"]},"metadata":{},"sourceType":"module"}